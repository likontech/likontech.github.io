<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>likon</title>
    <link>https://likontech.github.io/</link>
    <description>Recent content on likon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 30 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://likontech.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>首先要有意思</title>
      <link>https://likontech.github.io/posts/%E9%A6%96%E5%85%88%E8%A6%81%E6%9C%89%E6%84%8F%E6%80%9D/</link>
      <pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E9%A6%96%E5%85%88%E8%A6%81%E6%9C%89%E6%84%8F%E6%80%9D/</guid>
      <description>科技 AI AI 日报
日更 AI 资讯，强无敌。
工具 动画绘制 手绘个头像？
为所欲为 成语接龙，最终为「为所欲为」
railymood 听，下雨的声音 🌧
cantunsee 设计师闯关，练练你的像素眼
Emoji 合成 一个是 emoji 壁纸，另一个是 emoji 相加，哈哈哈
Git 命令 找一个 Git 命令需要几步？
打字练习 是时候拼一拼手速了
tinypng Smart WebP, PNG and JPEG compression
emojixd EmojiXD is an online encyclopedia of emojis at 📚.
paintcodeapp The Ultimate Guide To iPhone Resolutions
CODELF Search over GitHub, Bitbucket, GitLab to find real-world usage variable names
binaryconvert Online Binary-Decimal Converter</description>
    </item>
    
    <item>
      <title>日本核废水排放</title>
      <link>https://likontech.github.io/posts/%E6%97%A5%E6%9C%AC%E6%A0%B8%E5%BA%9F%E6%B0%B4%E6%8E%92%E6%94%BE/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E6%97%A5%E6%9C%AC%E6%A0%B8%E5%BA%9F%E6%B0%B4%E6%8E%92%E6%94%BE/</guid>
      <description> 当地时间2023年8月24日13时，日本政府正式开始排放核污染水。
福岛核事故 2011年3月11日发生在福岛第一核电站的灾难性事件的主要经过如下：
地震和海啸发生： 2011年3月11日，日本东北地区发生了9.0级的大地震，随后引发了高达15米的巨大海啸。
核电站受损： 地震导致福岛第一核电站的1-3号机组自动停止。然而，随后的海啸淹没了核电站，摧毁了应急柴油发电机等设备，导致核电站陷入全厂停电状态。
堆芯熔毁： 由于失去冷却和供电，核反应堆的堆芯开始升温。燃料组件的包壳熔化，燃料颗粒掉落到反应堆底部，形成堆芯熔毁。这导致核燃料的巨大衰变热不能得到有效冷却，可能会引发核燃料熔化。
氢气爆炸： 堆芯熔毁释放出氢气，积聚的氢气引发了1、3、4号机组的氢气爆炸，导致厂房和设施的严重损坏。
放射性物质泄漏： 事件导致大量放射性物质泄漏到周围环境，包括气体释放、安全壳破裂、排气泄压操作等。这导致广泛的辐射污染，影响了周边地区的人们和环境。
避难和清理工作： 周边地区的居民被疏散并划定了警戒区域。随着时间的推移，一些地区逐渐解除了避难指示，但仍有一部分地区保持避难指示。福岛第一核电站的废炉工作也在进行中。
放射性核素 碘-131（I-131）：
半衰期：约8.02天 影响：主要影响甲状腺，可能导致甲状腺辐射损伤和甲状腺癌的风险增加，特别是儿童和孕妇。 锶-90（Sr-90）：
半衰期：约28.8年 影响：积聚在骨骼中，可能对骨髓和骨骼组织产生辐射损伤，增加骨髓抑制和骨骼肿瘤的风险。 铯-137（Cs-137）：
半衰期：约30.2年 影响：广泛分布在体内，可能对内脏器官产生辐射损伤。 钚-239（Pu-239）：
半衰期：约24,110年 影响：钚-239是高度放射性和毒性的核素。其放射性衰变产生的α粒子可能对周围组织和细胞造成严重的损害，增加癌症和遗传变异的风险。 锕系元素（包括镎、镅等）：
影响：锕系元素可能会在体内积累，对身体组织产生辐射损害。 氚（Tritium，H-3）：
半衰期：约12.3年 影响：氚会以氚氧化物的形式存在，可能通过饮用水和食物进入人体，对健康产生影响。 氡（Radon，Rn-222）：
半衰期：约3.8天 影响：长期暴露于高氡浓度环境可能增加肺癌的风险。 其他放射性核素（如钡-140、钴-60等）：
这些核素可能也在福岛核事故中泄漏，对环境和健康产生影响。 </description>
    </item>
    
    <item>
      <title>给 hugo 修改字体</title>
      <link>https://likontech.github.io/posts/%E7%BB%99-hugo-%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%BB%99-hugo-%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93/</guid>
      <description>前言 修改下文章字体，感谢阿里妈妈刀隶体~
开整 下载喜欢的字体 找到你喜欢的字体，如本文采用 阿里妈妈刀隶体
下载字体，本文下载和使用 AlimamaDaoLiTi.woff2
加入到 Hugo 主题中 以 zozo 主题为例子
添加字体文件 将字体文件引入到 themes &amp;gt; zozo &amp;gt; static &amp;gt; fonts 目录下（如果没有目录自行新建）
新建 fonts.css 文件 在 themes &amp;gt; zozo &amp;gt; static &amp;gt; css 目录下新建 fonts.css 文件，并添加内容
@font-face { font-family: AlimamaDaoLiTi; src: url(&amp;#34;../fonts/AlimamaDaoLiTi.woff2&amp;#34;) format(&amp;#39;woff2&amp;#39;); } 添加 fonts.css 到文章模板中 在 themes &amp;gt; zozo &amp;gt; layouts &amp;gt; partials 的 head.html 文件中添加 fonts.css
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; media=&amp;#34;screen&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/animate.css@4.1.0/animate.min.css&amp;#34; /&amp;gt; &amp;lt;!-- 新添加的位置 --&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; media=&amp;#34;screen&amp;#34; href=&amp;#34;{{ &amp;#34;css/fonts.</description>
    </item>
    
    <item>
      <title>今晚看雷总成长的经历和感悟</title>
      <link>https://likontech.github.io/posts/%E4%BB%8A%E6%99%9A%E7%9C%8B%E9%9B%B7%E6%80%BB%E6%88%90%E9%95%BF%E7%9A%84%E7%BB%8F%E5%8E%86%E5%92%8C%E6%84%9F%E6%82%9F/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E4%BB%8A%E6%99%9A%E7%9C%8B%E9%9B%B7%E6%80%BB%E6%88%90%E9%95%BF%E7%9A%84%E7%BB%8F%E5%8E%86%E5%92%8C%E6%84%9F%E6%82%9F/</guid>
      <description>今晚细看雷总 资源 2023雷军年度演讲全文：成长的经历和感悟
演讲回顾 2023雷军年度演讲纯净版
武大往事 1987年，36年前，考上了武汉大学计算机系。
三个目标
两年修完大学所有学分 99% 的问题，都有标准答案，找个懂的人问问。
知识不全是线性的，大部分是网状的，知识点之间不一定有绝对的先后关系；前面内容看不懂，跳过去，并不影响学后面的；后面的学会了，有时候更容易看懂前面的。
成为优秀的程序员 没有电脑时，在纸上写程序。
用汇编写 DOS 系统的内存管理工具，叫RI。
在学报上发论文 敢想敢干非常重要，年轻人要有年轻人的魄力，很多事情没有想象得那么复杂，去试试就知道了。
很多人年轻时都有类似的经历，因为一本书、一部电影，或者一个人，梦想就被点燃了。我幸运的是，我真的把这个梦想当回事，想办法拆解成一个又一个可实现的目标，然后竭尽全力去实现。
创业之旅 一个人能力再强，也是有限的；找互补的朋友一块干，更容易成功。
办公司太不容易了，光有技术是不够的，还有太多东西要学，尤其是商业方面的基本功。
一个人可能走得更快，*但一群人走，才能走得更远。*这就是金山35年最重要的经验。
回望我自己过去三十多年的创业之旅，就是不断追寻梦想并不断成长的过程。
高端探索 最后，大家终于达成了共识，*高端是我们发展的必由之路，更是生死之战！*不能有任何动摇，必须死磕到底！我们正式把“高端化”定为集团战略！
小米13 成了我们“从参数领先到体验优先”的代表作。
这就是我们总结的高端产品设计三原则：“高端无短板，从参数领先到体验优先，软硬件深度融合”。
只有认知突破，才能带来真正的成长。这就是近十年来我最大的收获。
人因梦想而伟大 又因坚持梦想而成长 每一段经历，每一次蜕变，都是一次认知的突破，更是一次关键的成长。
最近几年，不少人都感到非常焦虑，非常迷茫。 在时代变迁的洪流中，如何获得内心的平静呢？ 我的答案是：成长。
只有脚踏实地的成长，才有足够的自信、勇气与决心，去迎接所有未知的挑战； 也只有脚踏实地的成长，才能让自己内心充实，眼里有光，时时刻刻充满力量！
人生是一场马拉松，一时一刻的成败得失，都不那么重要。 所有的人生难题，你都将在成长中找到答案。 人因梦想而伟大，又因坚持梦想而成长。
朋友们，愿你历经岁月洗礼，梦想依旧熠熠生辉。 朋友们，不管你今天的梦想是什么，我都真诚地祝福你，祝你梦想成真，祝你拥有一个快乐而充实的人生。
小米科技战略 小米的科技理念：选择对人类文明有长期价值的技术领域，长期持续投入。 小米集团已经布局12个技术领域、99个细分赛道，未来5年，技术投入1000 亿元人民币。
公式：（软件×硬件）ᴬᴵ 软件硬件深度融合，是我们为用户提供独特体验的根本保证 AI是未来的生产力，必须、也必然要全面赋能，也是小米长期持续投入的底层赛道
小米全面拥抱大模型 2023年4月，小米组建大模型团队，全面拥抱大模型。 与其他公司不同，小米大模型技术的主力突破方向为轻量化、本地部署。让用户既可以拥有数据安全，又可以拥有大模型的先进生产力。
新品发布会 小米MIX Fold 3 Xiaomi Pad 6 Max 14 小米手环8 Pro Redmi K60 至尊版 小米CyberDog 2 最后 人因梦想而伟大，又因坚持梦想而成长。 只有坚定的梦想和脚踏实地的成长， 我们才能为这个世界展开最美好的想象， 才能描绘这个时代最壮丽的画卷。 成长，步履不停地成长！这就是我们给时代的最好答案。</description>
    </item>
    
    <item>
      <title>轻松管理不同项目之间的Node.js版本</title>
      <link>https://likontech.github.io/posts/%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E9%A1%B9%E7%9B%AE%E4%B9%8B%E9%97%B4%E7%9A%84node.js%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E9%A1%B9%E7%9B%AE%E4%B9%8B%E9%97%B4%E7%9A%84node.js%E7%89%88%E6%9C%AC/</guid>
      <description>Node.js 版本管理工具 以下是一些常用的 Node.js 版本管理工具，按照 star 数量降序排列，并列出它们的特点、优劣势：
工具名称 GitHub 仓库链接 Stars 数量 特点 优势 劣势 NVM (Node Version Manager) nvm-sh/nvm 约 69.4k - 支持在项目和系统级别管理 Node.js 版本。- 强大的社区支持和活跃的维护。- 跨平台使用。- 能够在项目目录中指定版本。 - 受欢迎的工具，有大量文档和资源。- 可以方便地切换不同版本。- 适合多个项目和多个版本的情况。 - 需要安装 NVM，初次设置较多。- 在某些系统上可能需要额外的配置。 asdf asdf-vm/asdf 约 18.2k - 多用途的版本管理工具，支持多种编程语言和工具。- 插件系统提供广泛的支持。 - 一个工具可以管理多个编程语言的版本。- 跨平台使用。- 插件系统扩展了其功能。 - 对于仅需管理 Node.js 版本的情况可能过于庞大。- 插件系统需要一些学习成本。 nvm-windows coreybutler/nvm-windows 约 29.9k - Windows 平台上的 NVM 版本。- 支持在项目和系统级别管理 Node.js 版本。- 跨平台使用。 - 在 Windows 环境中管理 Node.</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 ——组合式函数</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0/</guid>
      <description>组合式函数 在 Vue 应用的概念中，“组合式函数”(Composables) 是一个利用 Vue 的组合式 API 来封装和复用 有状态逻辑的函数。
复用公共逻辑
无状态的逻辑，如 lodash 或是 date-fns 等库。 有状态的逻辑，有状态逻辑负责管理会随时间而变化的状态，如数据库连接状态、触摸手势等 示例：鼠标跟踪器
&amp;lt;script setup&amp;gt; import { ref, onMounted, onUnmounted } from &amp;#39;vue&amp;#39; const x = ref(0) const y = ref(0) function update(event) { x.value = event.pageX y.value = event.pageY } onMounted(() =&amp;gt; window.addEventListener(&amp;#39;mousemove&amp;#39;, update)) onUnmounted(() =&amp;gt; window.removeEventListener(&amp;#39;mousemove&amp;#39;, update)) &amp;lt;/script&amp;gt; &amp;lt;template&amp;gt;Mouse position is at: {{ x }}, {{ y }}&amp;lt;/template&amp;gt; 如果要多组件复用逻辑，就需要组合式函数。
// 实现 // mouse.js import { ref, onMounted, onUnmounted } from &amp;#39;vue&amp;#39; // 按照惯例，组合式函数名以“use”开头 export function useMouse() { // 被组合式函数封装和管理的状态 const x = ref(0) const y = ref(0) // 组合式函数可以随时更改其状态。 function update(event) { x.</description>
    </item>
    
    <item>
      <title>使用 Node.js 编写脚本</title>
      <link>https://likontech.github.io/posts/%E4%BD%BF%E7%94%A8-node.js-%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E4%BD%BF%E7%94%A8-node.js-%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC/</guid>
      <description>Hello, Node.js! 按照以下步骤进行操作：
安装 Node.js： 如果尚未安装 Node.js，你需要从官方网站（https://nodejs.org/）下载并安装适用于你操作系统的版本。
创建项目目录： 创建一个新的文件夹用于存放你的脚本文件。
初始化项目： 打开终端（命令行界面），进入你的项目目录，然后运行以下命令来初始化项目（这一步是可选的，但可以帮助你更好地管理依赖项）：
npm init 按照提示输入项目的信息，或者直接按回车键使用默认值。
创建脚本文件： 在项目目录中创建一个新的 .js 文件，例如 script.js。
编写脚本： 使用你喜欢的文本编辑器打开新创建的 .js 文件，然后编写你的 Node.js 脚本代码。以下是一个简单的示例：
// script.js console.log(&amp;#34;Hello, Node.js!&amp;#34;); 运行脚本： 返回终端，确保你在项目目录中，然后运行以下命令来执行你的脚本：
node script.js 在这个示例中，终端将会显示 &amp;ldquo;Hello, Node.js!&amp;quot;。
这只是一个简单的开始。实际上，Node.js 脚本可以涉及更多的操作，如读写文件、处理数据、发起网络请求等。你可以使用 Node.js 的内置模块，也可以使用第三方库来辅助你完成这些任务。
如果你需要在脚本中使用第三方库，你可以通过 npm install 命令来安装这些库，例如：
npm install axios 这会将 axios 库安装到你的项目中，并在脚本中使用它。
Nodejs 内置模块和常见三方库 Node.js 内置模块和常见第三方库进行表格输出：
内置模块 描述 fs 文件系统操作 http 和 https 创建服务器和发起 HTTP 请求 url 解析和处理 URL 字符串 path 处理文件路径 os 操作系统相关信息 events 创建和处理事件 stream 处理流数据 crypto 加密和解密功能 util 实用工具函数 querystring 解析和处理 URL 查询字符串 child_process 创建子进程执行外部命令 常见第三方库 描述 Express.</description>
    </item>
    
    <item>
      <title>如何在数字时代更好地学习</title>
      <link>https://likontech.github.io/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%95%B0%E5%AD%97%E6%97%B6%E4%BB%A3%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%95%B0%E5%AD%97%E6%97%B6%E4%BB%A3%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%AD%A6%E4%B9%A0/</guid>
      <description>翻译自 giansegato 的 How to Learn Better in the Digital Age thanks
在我开始提高效率和表现之前，我曾经花很多时间在网上获取大量的数字内容。我的信息饮食范围从鼓舞人心的TED演讲到专门的播客，从 Hacker News 新闻上发现的博客文章到 Twitter 上分享的电子书。
我非常好奇，并尽可能地接受新内容。会有什么危害呢？——我想。我喜欢这样度过我的时间。它感觉很有用，很有趣，而且它培养了我作为一个“聪明人”的自我形象——同时。确实，一个学习黑客。
事实证明我并没有破解任何东西：学习并不是真实的。
几个月前，我开始怀疑自己的习惯是否有效。
虽然我增加了信息消耗，但我并没有保留其中的大部分。我的记忆就像一个漏水的桶。当然，我花了数十个小时在广播中收听政治。但当我尝试在对话中使用这些观点时，我发现我实际上并没有足够的知识来提出连贯的论点。我知道周围的背景，但当我需要具体说明时，我的论点就会崩溃。对于许多其他主题也是如此：它们越技术性，我的记忆力就越少。
所有这些信息到哪里去了？
问题在于我如何看待学习，以及如何对待学习。
学习将信息消费转化为持久的知识。这两件事是不同的：信息是短暂的，而真正的知识是基础。如果知识是一个人，那么信息就是他的照片。
人们很容易用累加性、累积性的术语来思考学习：如果我积累足够的信息，它最终会变成知识。我们倾向于用物质来判断世界，如果数据是有形的，那么无限增长的记忆可能是合理的假设。我消耗的信息越多，我存储的信息就越多，我以后可以检索的信息数据也就越多。我读的商业通讯越多，我对商业的了解就越多。
然而，这种思路并不真正适用于我的情况：毫无疑问，我每周都会阅读许多商业新闻通讯，但这并没有转化为长期的商业知识。
在过去的八个月里，我试图找到这个谜题的答案。这让我深入探讨了元学习的主题：人类如何学习？在数字信息时代我们如何才能更好地学习？
学习一定要努力 对我们来说不幸的是，人类的记忆并不像存储，“被动积累”也不是学习的发生方式。
事实上，只有当我们认真学习的过程中，我们才能记住信息。学习的内在努力不仅仅是核心活动的副产品，就像跑步时的呼吸急促一样。相反：这才是真正 实现它的原因。这种关系是因果关系。
我没有找到避免努力的学习窍门，因为没有简单的学习这样的事情：学习必须付出努力才能发生。
最让我惊讶的是，学习远比我愿意承认的更扎根于物理世界。
努力最字面的含义是体力努力（想想在健身房举重）。信息保留也是如此：当吸收信息的过程需要体力消耗时，效果最好。当我们的学习是身体上的、发自内心的、显而易见的时候，我们的记忆力就会闪闪发光，就像一上午写字后手上的酸痛一样。
由于它们是被动的、简单的、完全数字化的，在意识到这一点之后，我所有的播客、电子书、有声读物、时事通讯、博客文章、视频、现场网络研讨会突然被剥夺了“学习状态”。相反，它们在我的日程安排中占据了适当的位置，作为纯粹的娱乐活动。
事实上，数字产品让你很容易欺骗自己，让自己以为自己在学习，而实际上你是在娱乐。
我仍然不知道为什么我们的思维会这样运作。这只是数字化学习和教学的现状，还是实际上在某个地方可以找到轻松学习的余地？
学习神经学 我不是医学专家，更不用说神经学专家了，但我确实想粗略地了解当我们——作为人类——创造知识时会发生什么。幸运的是，我不需要深厚的医学专业知识来了解问题的要点。
我们的大脑由相互连接的神经元网络组成。这些神经元之间的联系称为轴突：传输电脉冲的神经纤维的细长突出。
这些轴突周围有一层称为髓磷脂的绝缘膜。它覆盖许多神经元轴突并促进电信号沿着神经元回路的传播。轴突周围的髓磷脂越多，信号传输就越强、连接越紧密。
髓磷脂对于神经传递的作用就像氧气对于火的作用一样。它允许长距离快速信息传输，并且大大提高了我们大脑中电信号的传播速度。
将其视为流经容量动态变化的管道的水。容量更大的管道可以比小管道或缓慢滴水更快地输送更多的水。支持神经连接的髓磷脂越多，就越容易使用该连接，从而使用该技能或记住与该连接相关的主题
髓磷脂的一个关键方面是它具有高度动态性。它是我们大脑可塑性的一个组成部分。那么问题就变成了：髓磷脂是如何产生的，为什么产生？
当我们遇到一个新话题时，大脑的新区域就会开始激活。我们越多地使用这些新区域，合成的髓磷脂就越多，主题（或活动）就越容易。
我们都知道俗话说熟能生巧。我们越多地使用大脑的某个区域，我们的大脑就越会“优先考虑”和“磨练”它。这就是导致髓磷脂形成的原因：活动诱导髓鞘形成，从而增强这些神经元的连接强度和效率。这是一个自我强化的过程。
换句话说，它是复合的。
现在明白为什么学习这么难了吗？为了学习任何东西，我们必须在大脑中尚未探索的区域准备好之前积极利用它们。从字面上看，这是走出舒适区。我们使用它们越多，它们就会变得越好。学习在结构上是困难的。
髓鞘形成真正令人着迷的是它与运动神经元的积极使用相关。人类认知似乎从根本上建立在感觉运动过程的基础上：当我们将某些身体活动与信息联系起来时，我们可以更好地保留信息。一般的直觉是，运动提供了我们可以用来检索知识的额外线索。
当我们做笔记时，我们可以看到这种效果的发生。大量研究表明，物理记笔记（即手写笔记）比使用笔记本电脑有效得多。键盘输入无法像铅笔和纸之间的接触那样向大脑提供触觉反馈：这种接触，这种原始反馈，是在手脑复合体中创建神经回路的关键，有证据表明支持记忆和保留。
所有这些意味着我们需要从根本上重新评估数字学习。我们还没有进化到通过被动观看大师班视频来存储信息：这不是我们的思维方式。
然而，硬币的另一面是，我们生活在一个信息空前过剩的时代。这是一个机会，我们应该学会抓住。
数字世界中的创造性学习 在发现努力有助于学习之前，描述我的信息饮食的最好方式就是寓教于乐。
寓教于乐将教育主题与娱乐方法相结合。即使寓教于乐优化的是被动注意力而不是努力参与（与学习相反），它也不仅仅是“纯粹的乐趣”。正如Cal Newport等深度工作倡导者所建议的那样，删除 Twitter 并取消订阅时事通讯，实际上最终可能会阻碍学习。
我将寓教于乐视为学习的准备：它是一种强大的探索工具，可以提供学习的想法和动力。然而，它也不是在自我学习，就像买跑鞋不是跑步一样。
在这个框架内，“无意识”的在线浏览可以转变为寻找学习机会。这是另一个搜索问题，平衡探索新机会与对现有机会的承诺是关键——我在另一篇文章中详细讨论了这个主题。这是为了平衡在线“寻找”有趣主题所花费的时间与长期保留和整合所需的离线工作。
实际上，我用一个强大的工具解决了这个权衡：学习收件箱。
学习收件箱是我想实际学习的内容的待办事项列表。我从传奇教育技术专家安迪·马图沙克 (Andy Matuschak) 那里学到了这个想法，他使用类似的概念作为捕获可能有用的参考资料的工具。学习收件箱是一个系统，它迫使我留意哪些内容是学习内容，哪些内容最终只是娱乐。
我在路上发现的所有有趣的东西都会发送到我的学习收件箱，并从那里进行分类，无论是论文、在线文章、博客文章、YouTube 视频还是播客。当一个项目最终出现在那里时，可能会发生三件事：我要么决定积极参与它，申请未来的兴趣，要么只是将其丢弃。积极参与正是它听起来的样子：我需要采取努力的行动来消费列表中的内容，否则我会自动将其作为娱乐。
换句话说，我需要用它做点什么。创造一些东西。写一篇关于它的博客文章，在新项目中使用它，在现场测试它，在聚会上教授它。这就是我在许多会议上发言的原因：它是一种学习工具。</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 ——十-十三节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%8D%81-%E5%8D%81%E4%B8%89%E8%8A%82/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%8D%81-%E5%8D%81%E4%B8%89%E8%8A%82/</guid>
      <description>如果好的老师，好的医生， 评价标准是金钱， 那么也就没必要区分任何职业了 你干嘛的，我赚钱的。 你学啥的，我学赚钱的。 —— 罗翔
十-十三节 生命周期 侦听器 模板引用 组件基础 生命周期 钩子函数 描述 beforeCreate 实例刚在内存中创建，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。 created 实例已经完全创建，数据观测 (data observer) 和 event/watcher 事件配置之后被调用。 beforeMount 实例在挂载之前被调用。相关的 render 函数首次被调用。 mounted 实例挂载到 DOM 后调用，对应 el 被新创建的 vm.$el 替换。 beforeUpdate 数据更新时调用，但是在虚拟 DOM 重新渲染和打补丁之前。可以在这里访问更新前的状态。 updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁后调用。 beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用。 destroyed Vue 实例销毁后调用，清理工作应在这里进行。 errorCaptured 捕获子孙组件抛出的错误，不会向上冒泡。 侦听器 watch watch 是一个用于监听 Vue 实例数据变化的选项。
通过使用 watch，你可以在数据发生变化时执行特定的逻辑操作，比如发送网络请求、更新其他数据、触发事件等。
watch 提供了一种响应式地监视数据变化的方式，使得你可以在数据状态改变时做出相应的反应。
watch 选项有两种用法：
直接在组件的选项中定义 是使用实例方法 $watch 1.</description>
    </item>
    
    <item>
      <title>Vue 插槽</title>
      <link>https://likontech.github.io/posts/vue-%E6%8F%92%E6%A7%BD/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-%E6%8F%92%E6%A7%BD/</guid>
      <description>插槽（Slots）是 Vue.js 中一种强大的组件通信机制，它允许你在组件的模板中预留一些位置，将父组件中的内容传递到子组件中。插槽允许你在父组件中定义子组件的一部分内容，使得子组件可以接收并渲染这些内容。
当涉及到插槽（Slots）时，Vue.js 提供了三种主要类型的插槽：默认插槽、具名插槽和作用域插槽。这些插槽类型允许你在父组件中向子组件传递内容，并在子组件内部灵活地渲染和处理这些内容。下面我将为你详细解释每种插槽类型。
1. 默认插槽（Default Slots）：
默认插槽是最简单的插槽类型，它允许你将父组件中的内容传递给子组件，并在子组件内部渲染。
父组件模板：
&amp;lt;template&amp;gt; &amp;lt;child-component&amp;gt; &amp;lt;p&amp;gt;This content will be placed in the default slot.&amp;lt;/p&amp;gt; &amp;lt;/child-component&amp;gt; &amp;lt;/template&amp;gt; 子组件模板：
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;Child Component&amp;lt;/h2&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 在子组件的模板中，使用 &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; 标签来表示默认插槽的位置。父组件传递给子组件的内容会被插入到这个位置。
2. 具名插槽（Named Slots）：
具名插槽允许你在子组件的不同位置插入不同的内容，每个具名插槽都有一个名称。
父组件模板：
&amp;lt;template&amp;gt; &amp;lt;child-component&amp;gt; &amp;lt;template v-slot:header&amp;gt; &amp;lt;h3&amp;gt;This is the header&amp;lt;/h3&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;template v-slot:footer&amp;gt; &amp;lt;p&amp;gt;This is the footer&amp;lt;/p&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/child-component&amp;gt; &amp;lt;/template&amp;gt; 子组件模板：
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;Child Component&amp;lt;/h2&amp;gt; &amp;lt;slot name=&amp;#34;header&amp;#34;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;slot name=&amp;#34;footer&amp;#34;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 在父组件中，使用 v-slot 指令来为具名插槽命名，并在子组件中使用 &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; 标签来表示插槽的位置。</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 ——六-九节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%85%AD-%E4%B9%9D%E8%8A%82/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%85%AD-%E4%B9%9D%E8%8A%82/</guid>
      <description>六-九节 条件渲染 列表渲染 事件处理 表单输入绑定 条件渲染 v-if 表达式返回真值时被渲染
&amp;lt;div v-if=&amp;#34;type === &amp;#39;A&amp;#39;&amp;#34;&amp;gt; A &amp;lt;/div&amp;gt; &amp;lt;div v-else-if=&amp;#34;type === &amp;#39;B&amp;#39;&amp;#34;&amp;gt; B &amp;lt;/div&amp;gt; &amp;lt;div v-else-if=&amp;#34;type === &amp;#39;C&amp;#39;&amp;#34;&amp;gt; C &amp;lt;/div&amp;gt; &amp;lt;div v-else&amp;gt; Not A/B/C &amp;lt;/div&amp;gt; # 不止一个元素可以依附于 &amp;lt;template&amp;gt; &amp;lt;template v-if=&amp;#34;ok&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Paragraph 1&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Paragraph 2&amp;lt;/p&amp;gt; &amp;lt;/template&amp;gt; v-show 按条件显示一个元素
&amp;lt;h1 v-show=&amp;#34;ok&amp;#34;&amp;gt;Hello!&amp;lt;/h1&amp;gt; v-if 和 v-show 区别
特性 v-if v-show 渲染方式 根据条件动态添加或移除元素 通过 CSS 控制元素的显示与隐藏 初始化开销 需要初始化开销，条件为 true 时创建元素并插入 DOM 无初始化开销，元素一直在 DOM 中，通过 CSS 控制显示隐藏 性能考虑 适合条件变化较少或有大块内容需要动态渲染 适合条件频繁变化或内容变化较少，仅需切换显示隐藏 适用场景 动态内容频繁变化时较为高效 静态内容或频繁切换显示隐藏的情况下较为高效 列表渲染 v-for 基于一个数组来渲染一个列表</description>
    </item>
    
    <item>
      <title>Vue render 和 mixin 浅学</title>
      <link>https://likontech.github.io/posts/vue-render-%E5%92%8C-mixin-%E6%B5%85%E5%AD%A6/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-render-%E5%92%8C-mixin-%E6%B5%85%E5%AD%A6/</guid>
      <description>render 在 Vue.js 中，render 函数是一个核心的概念，用于手动创建虚拟 DOM，并将其渲染为真实的 DOM。通常，我们使用 Vue.js 的模板语法（即在 &amp;lt;template&amp;gt; 标签中编写模板）来声明页面的结构和数据绑定，然后由 Vue.js 自动将模板渲染为虚拟 DOM 和真实的 DOM。
然而，有时我们需要在更底层的层面上直接控制页面的渲染过程，这时就可以使用 render 函数。render 函数接收一个名为 h 的参数，它是一个创建虚拟 DOM 元素的辅助函数（也称为 hyperscript），你可以用它来手动创建虚拟 DOM。
h 函数是 Vue.js 中的一个重要概念，它是用于创建虚拟 DOM 元素的辅助函数（也称为 hyperscript）。在 render 函数中，我们可以使用 h 函数手动构建虚拟 DOM，然后 Vue.js 会将这些虚拟 DOM 转换成真实 DOM 并渲染到页面上。
h 函数的名称是 &amp;ldquo;hyperscript&amp;rdquo; 的缩写，它的名字来自于 JavaScript 中的 &amp;ldquo;hypertext&amp;rdquo;（超文本）和 &amp;ldquo;script&amp;rdquo;（脚本）。这个函数具有以下语法：
h(tag, data?, children?) tag：表示创建的元素的标签名，可以是字符串形式的标签名，也可以是组件选项对象。例如，&#39;div&#39; 或 MyComponent。
data（可选）：是一个包含了元素的属性、样式、事件等信息的对象。
children（可选）：表示元素的子元素，可以是文本内容或其他虚拟 DOM 元素。
基本的 render 函数使用方法如下：
import Vue from &amp;#39;vue&amp;#39;; new Vue({ render(h) { // 创建虚拟 DOM 元素并返回 return h(&amp;#39;div&amp;#39;, { class: &amp;#39;container&amp;#39; }, [ h(&amp;#39;h1&amp;#39;, &amp;#39;Hello, Vue!</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 ——三-五节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E4%B8%89-%E4%BA%94%E8%8A%82/</link>
      <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E4%B8%89-%E4%BA%94%E8%8A%82/</guid>
      <description>室温超导体新闻这两天热火朝天。
室温超导体是指在常规的室温条件下（通常是接近或等于常温，即约 20 摄氏度）能够表现出超导现象的材料。超导现象是指在某些材料中，在特定的低温条件下，电阻突然变为零，并且磁场被完全排斥的现象。传统的超导材料需要极低的温度（接近绝对零度，约 -273.15 摄氏度）才能表现出超导行为，这对于应用和实际应用来说非常不便。
三-五节 响应式基础 计算属性 Class 与 Style 绑定 响应式基础 ref import { ref } from &amp;#39;vue&amp;#39; export default { setup() { const count = ref(0) function increment() { // 在 JavaScript 中需要 .value count.value++ } // 不要忘记同时暴露 increment 函数 return { count, increment } } } &amp;lt;button @click=&amp;#34;increment&amp;#34;&amp;gt; {{ count }} &amp;lt;/button&amp;gt; 在 setup() 函数中手动暴露大量的状态和方法非常繁琐。可以通过使用单文件组件 (SFC) 来避免这种情况。可以使用 &amp;lt;script setup&amp;gt; 简化代码。
&amp;lt;script setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39; const count = ref(0) function increment() { count.</description>
    </item>
    
    <item>
      <title>《Vue Guide》随手记 —— 前两节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%89%8D%E4%B8%A4%E8%8A%82/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%89%8D%E4%B8%A4%E8%8A%82/</guid>
      <description>台风“杜苏芮”，北京连续多雨。
前两节 演练场 创建本地工程 npm init vue@latest 创建一个 Vue 应用​ 模板语法 创建一个 Vue 应用 import { createApp } from &amp;#39;vue&amp;#39; const app = createApp({ /* 根组件选项 */ }) 这段代码是一个使用 Vue 3 Composition API 创建新的 Vue.js 应用程序的示例。
模板语法 文本插值 原始 HTML Attribute 绑定 &amp;lt;script setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39; const msg = ref(&amp;#39;Hello World!&amp;#39;) const rawHtml = ref(&amp;#39;&amp;lt;span style=&amp;#34;color: red&amp;#34;&amp;gt;This should be red.&amp;lt;/span&amp;gt;&amp;#39;); &amp;lt;/script&amp;gt; &amp;lt;template&amp;gt; &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt; &amp;lt;input v-model=&amp;#34;msg&amp;#34;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 —— 核心功能和特点</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%92%8C%E7%89%B9%E7%82%B9/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%92%8C%E7%89%B9%E7%82%B9/</guid>
      <description>背景 最近需要使用 Vue + Composition API 开发项目需求，所以再过下相关文档，做一下记录。
开始 Vue：Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。
Vue 的两个核心功能
声明式渲染：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。 早年间流行的 jQuery 就是典型的命令式框架。命令式框架的一大特点就是关注过程。例如，我们把下面这段话翻译成对应的代码：
01 - 获取 id 为 app 的 div 标签 02 - 它的文本内容为 hello world 03 - 为其绑定点击事件 04 - 当点击时弹出提示：ok 对应的代码为：
01 $(&amp;#39;#app&amp;#39;) // 获取 div 02 .text(&amp;#39;hello world&amp;#39;) // 设置文本内容 03 .on(&amp;#39;click&amp;#39;, () =&amp;gt; { alert(&amp;#39;ok&amp;#39;) }) // 绑定点击事件 可以看到，自然语言描述能够与代码产生一一对应的关系，代码本身描述的是“做事的过程”，这符合我们的逻辑直觉。
与命令式框架更加关注过程不同，声明式框架更加关注结果。结合 Vue.</description>
    </item>
    
    <item>
      <title>方法论大全——三问 GPT</title>
      <link>https://likontech.github.io/posts/%E6%96%B9%E6%B3%95%E8%AE%BA%E5%A4%A7%E5%85%A8%E4%B8%89%E9%97%AE-gpt/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E6%96%B9%E6%B3%95%E8%AE%BA%E5%A4%A7%E5%85%A8%E4%B8%89%E9%97%AE-gpt/</guid>
      <description>什么是方法论？ 方法论是一种关于方法的学科，也可以理解为对方法的研究和探讨。它关注的是如何寻找、发展和应用有效的方法来解决问题、实现目标或进行研究。方法论不仅限于某一个特定领域，它在各个学科和实践领域都有应用。
在不同领域中，方法论可以包含以下内容：
研究方法论：研究方法论是关于如何进行科学研究的一门学科。它包括研究设计、数据收集、数据分析等方面的方法，旨在帮助研究者系统地进行科学研究，确保研究的可靠性和准确性。
教学方法论：教学方法论是关于如何有效地进行教学和学习的研究。它探讨教学策略、教学资源的选择、学习评估等问题，帮助教师和学生更好地达成学习目标。
管理方法论：管理方法论关注如何高效地组织和管理组织、团队或项目。它涉及到决策、计划、执行、监控等方面的方法，以实现组织目标。
哲学方法论：哲学方法论是哲学研究中的一个重要分支，它探讨哲学思考和研究的方法，如何进行哲学推理和分析，以及如何建立哲学理论体系。
技术方法论：技术方法论指导了在工程、科技等领域中的实践方法，例如软件开发方法论、工程设计方法论等。
总之，方法论是对方法和过程进行系统、理性探讨的学科，它的目标是寻找最优、高效、可靠的方法来解决问题，推动知识和实践的进步。无论在学术研究、教学、管理还是其他领域，方法论都发挥着重要的指导作用。
为什么方法论很重要？ 方法论在各个领域都非常重要，因为它是指导和规范我们思考和解决问题的方法和原则。以下是方法论的重要性：
提高效率：合理的方法能够提高工作和学习的效率。通过有条理的步骤和有效的策略，我们可以更快地达到目标，并节省时间和精力。
确保准确性和可靠性：方法论有助于确保我们的思考和行动是准确、可靠的。使用科学、经过验证的方法，可以减少错误和误判的可能性，从而得出更准确的结论。
促进创新：恰当的方法能够激发创新思维。通过运用不同的方法探索问题，我们可以发现新的解决方案，创造性地解决挑战。
增强系统性：方法论能够帮助我们建立系统化的思维框架，将复杂问题分解为更容易理解和处理的部分。这样做有助于避免遗漏重要细节，确保全面性。
增加可复制性：好的方法论能够确保研究、实验或项目的可复制性。如果我们按照一定的规则和步骤进行工作，其他人可以复制我们的过程，并验证或进一步发展我们的发现。
优化资源利用：合理的方法可以最大程度地优化资源的利用。无论是时间、金钱还是人力，方法论都能指导我们在实现目标时做出明智的选择。
提高决策质量：方法论有助于决策的理性化。在决策过程中，我们可以借鉴已有的方法和框架，使决策更加客观、明晰，减少主观偏见的影响。
促进合作与交流：拥有共同的方法论可以促进团队合作与交流。成员们使用相同的方法和语言，能更好地协作、理解彼此，并避免产生沟通误解。
总的来说，方法论不仅是实现目标的有效工具，还是知识传承和学科发展的基础。它帮助我们在不同领域做出更明智、高效、准确的决策和行动，从而推动个人和社会的进步。
管理和技术领域，主要有哪些经典方法论？ 在管理和技术领域，有许多经典方法论被广泛应用于组织管理、项目管理、问题解决、团队合作以及技术开发等方面。以下是主要的一些经典方法论：
管理领域的经典方法论：
SWOT分析：评估组织或项目的优势（Strengths）、劣势（Weaknesses）、机会（Opportunities）和威胁（Threats），帮助制定战略决策。
PDCA循环（Deming循环）：通过不断的计划（Plan）、执行（Do）、检查（Check）和行动（Act）来实现持续改进。
Kaizen（改善活动）：来自日本的管理哲学，强调持续改进，通过小步骤不断提高效率和质量。
TQM（全面质量管理）：一种注重全员参与、不断改进的质量管理方法，追求满足客户需求和提高组织绩效。
卡内基基金：用于度量学分和学业完成的经典方法，广泛应用于教育领域。
MBWA（管理者走动在岗位）：由彼得·德鲁克（Peter Drucker）提倡，强调管理者应该亲自走动在员工的岗位上，了解实际情况。
技术领域的经典方法论：
敏捷开发：一种强调快速响应变化、团队合作和持续交付的软件开发方法。
测试驱动开发（TDD）：要求在编写功能代码之前先编写测试代码，保证代码质量和功能正确性。
持续集成与持续交付（CI/CD）：自动化的软件交付实践，频繁地集成和交付代码，确保软件稳定性和质量。
设计模式：经验丰富的开发者总结出来的解决常见问题的模板，用于构建可扩展、灵活的代码。
DevOps：结合开发和运维，通过自动化和协作，加快软件交付过程，提高产品质量和稳定性。
安全开发（Secure Coding）：考虑和预防安全漏洞和攻击的实践，保证软件的安全性。
六西格玛（Six Sigma）：一种统计方法，用于提高过程质量和减少缺陷。
人机交互设计（Human-Computer Interaction，HCI）：关注用户体验，设计易于使用的软件和系统。
这些经典方法论在管理和技术领域经过验证，被广泛应用于不同的组织和项目。它们帮助管理者和技术人员在实践中更加系统、高效地达成目标，提高工作质量和效率。根据实际情况和需求，选择合适的方法论并合理应用，有助于取得更好的业绩和成果。</description>
    </item>
    
    <item>
      <title>简单背后的力量：揭秘 37signals 的工作哲学</title>
      <link>https://likontech.github.io/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9B%E9%87%8F%E6%8F%AD%E7%A7%98-37signals-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%93%B2%E5%AD%A6/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9B%E9%87%8F%E6%8F%AD%E7%A7%98-37signals-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%93%B2%E5%AD%A6/</guid>
      <description>由于个人偏爱 Ruby 和 Ruby on Rails（简称Rails）， Rails 是一种开源的 Web 应用程序开发框架，最初由 David Heinemeier Hansson 在 37signals 开发 Basecamp （n. 意为登山大本营，基地营（同 base camp））时创建并开源。从 Rails 了解到这家公司 37signals，现在被称为 Basecamp，是一家软件开发公司，成立于 1999 年，由 Jason Fried、Carlos Segura 和 Ernest Kim 创立。
最近在看一本富有启发性和实用性的书 《Rework》，提供了一种非传统的商业思维方式，挑战了传统的工作和管理观念。
所以想更多了解下这个公司和这群人，那么今天就来简单盘一盘这家公司的发展、经营理念和相关产品。
回归正题，先看看公司产品、发展变化。
1999 年：37signals 由 Jason Fried、Carlos Segura 和 Ernest Kim 在美国芝加哥成立，最初是一家网页设计公司。
2004 年：公司发布了 Basecamp，这是一个基于网络的项目管理和协作工具，受到广泛欢迎。Basecamp 的简洁和易用性为公司带来了许多用户和客户。
2006 年：37signals 推出了另一款知名产品，名为 Highrise，这是一款在线联系人和客户关系管理（CRM）工具，用于跟踪客户和商务联系。
2010 年：公司进一步扩展了产品线，推出了 Campfire，这是一个团队协作和实时聊天工具，旨在提高团队之间的沟通效率。
2013 年：37signals 公司宣布将重点转向 Basecamp，并将公司名称改为Basecamp。这标志着他们更专注于进一步发展和改进 Basecamp 产品。
2019 年：Basecamp 发布了全新的 Basecamp 3 版本，带来了一系列新功能和改进，以满足用户需求。</description>
    </item>
    
    <item>
      <title>解锁你的 Node.js 开发潜力：30&#43; 热门框架让你构建出色的应用程序！</title>
      <link>https://likontech.github.io/posts/%E8%A7%A3%E9%94%81%E4%BD%A0%E7%9A%84-node.js-%E5%BC%80%E5%8F%91%E6%BD%9C%E5%8A%9B30&#43;-%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6%E8%AE%A9%E4%BD%A0%E6%9E%84%E5%BB%BA%E5%87%BA%E8%89%B2%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E8%A7%A3%E9%94%81%E4%BD%A0%E7%9A%84-node.js-%E5%BC%80%E5%8F%91%E6%BD%9C%E5%8A%9B30&#43;-%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6%E8%AE%A9%E4%BD%A0%E6%9E%84%E5%BB%BA%E5%87%BA%E8%89%B2%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>罗列下 nodejs 框架，只抛转不引玉。
Express.js：快速且灵活的 Web 应用程序框架。
Koa.js：现代化且轻量级的Web框架，由 Express.js 的创造者打造。
Hapi.js：用于构建可扩展的应用程序和服务的框架。
Nest.js：基于 TypeScript 的渐进式 Node.js 框架，适用于构建可扩展的企业级应用程序。
Meteor：全栈 JavaScript 框架，用于构建现代化的Web和移动应用程序。
Sails.js：类似于 Ruby on Rails 的 MVC 框架，用于构建实时应用程序和 API。
LoopBack：强大的 API 和微服务框架，具有自动生成 API 和数据层的能力。
Adonis.js：基于 MVC 模式的框架，提供了一组强大的工具和功能，用于构建可扩展和高性能的应用程序。
Fastify：快速和低开销的 Web 框架，专注于提供高性能的 API 和服务。
Feathers.js：现代化、轻量级的框架，用于构建实时应用程序和 RESTful API。
Strapi：开源的 Headless CMS，提供易用的界面和灵活的 API，用于创建和管理内容。
Total.js：全栈框架，提供从服务器端渲染到数据库集成的一系列功能。
Keystone.js：CMS 和 Web 应用程序框架，结合了 Express.js 和 MongoDB，并提供强大的管理界面。
Socket.io：用于构建实时应用程序的库，提供 WebSocket 和轮询传输等通信方式。
Next.js：用于构建 React 应用程序的框架，提供服务器端渲染、静态生成和动态路由等功能。
Nuxt.js：基于 Vue.js 的应用框架，支持服务器端渲染和静态站点生成。
Restify：专注于构建 RESTful API 的框架，提供易用的路由、请求处理和错误处理等功能。
Kuzzle：后端框架，提供实时通信、数据存储和身份验证等功能，适用于构建实时应用程序和物联网解决方案。
SvelteKit：用于构建高性能 Web 应用程序的框架，结合了 Svelte 的组件化开发和服务器端渲染的功能。</description>
    </item>
    
    <item>
      <title>Ruby 30 min 热身</title>
      <link>https://likontech.github.io/posts/ruby-30-min-%E7%83%AD%E8%BA%AB/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/ruby-30-min-%E7%83%AD%E8%BA%AB/</guid>
      <description>ruby-lang
times 3.times do print &amp;#39;Welcome &amp;#39; end # Welcome Welcome Welcome 2 + 6 2 + 6 4 * 10 5 - 12 30 / 4 &amp;#34;Jimmy&amp;#34; # 7.5 puts puts 4 * 10 puts 5 - 12 puts 30 / 4 string &amp;#34;Jimmy&amp;#34;.reverse # ymmiJ &amp;#34;Jimmy&amp;#34;.length # 5 &amp;#34;Jimmy&amp;#34; * 5 # JimmyJimmyJimmyJimmyJimmy 40.to_s.reverse # 04 poem.gsub(&amp;#34;toast&amp;#34;, &amp;#34;honeydew&amp;#34;) poem.reverse poem.lines.reverse puts poem.lines.reverse.join array [12, 47, 35] [12, 47, 35].</description>
    </item>
    
    <item>
      <title>如何从零开始学会 Ruby on Rails?</title>
      <link>https://likontech.github.io/posts/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%BC%9A-ruby-on-rails/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%BC%9A-ruby-on-rails/</guid>
      <description>摘自 huacnlee 的文章, 文章现在访问不了了，摘抄一份给需要学习的朋友们
这个话题曾经给身边的很多朋友说过同样的话题，这里整理一下。
如果你是一个门外汉，你会 .NET 或是 Java 或是 PHP … 你对 Ruby on Rails 感兴趣，想学习，开怎么开始？
如果你有以上语言两年以上的工作经验，按照我指的路子，最慢 1 个月就能学会 Ruby on Rails，这个方案曾经经过好几个人证实。
以下步骤请一步一步来，切勿心急跳过，最好连我上面的链接都不要提前点击！
安装 Linux 或 Mac， 开发工具使用 Windows &amp;amp; Linux -&amp;gt; Sublime Text 2, Mac -&amp;gt; TextMate 2 当然你也可以用 Vim 或 Sublime text 2;
安装 Ruby 和 Rails 开发环境可以按照这个流程：《如何快速正确的安装 Ruby, Rails》;
看完 http://guides.rubyonrails.org 这里有简体版本；
通过学习 Rails Guides 实现一个博客系统，包涵完整的功能(包括 UI)，预计两周；
从头到尾一字不漏的看完《应用 Rails 进行敏捷 Web 开发》；
回头审视之前的博客设计和《应用 Rails 进行敏捷 Web 开发》的区别，可以再重新搞个博客;</description>
    </item>
    
    <item>
      <title>React Hooks 草稿</title>
      <link>https://likontech.github.io/posts/react-hook-%E8%8D%89%E7%A8%BF/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/react-hook-%E8%8D%89%E7%A8%BF/</guid>
      <description>前言 React v16.8 版本引入了全新的 React Hook API，颠覆了以前的用法。看了很多文章，都认为是 React 的未来，简单介绍介绍。
类组件 看个简单类组件例子
import React, { Component } from &amp;#39;react&amp;#39;; class ClassComponent extends Component { constructor(props) { super(props); this.state = { count: 0, }; } incrementCount = () =&amp;gt; { this.setState((prevState) =&amp;gt; ({ count: prevState.count + 1, })); }; decrementCount = () =&amp;gt; { this.setState((prevState) =&amp;gt; ({ count: prevState.count - 1, })); }; render() { const { count } = this.state; return ( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;Class Component Example&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt; &amp;lt;button onClick={this.</description>
    </item>
    
    <item>
      <title>给 hugo 添加访问量</title>
      <link>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/</guid>
      <description>前言 添加个访问量功能耍耍~
开整 借助不蒜子，两行代码，搞定计数。
打开官网 不蒜子，关键代码如下，打开浏览器检查功能，可以看到 span 标签及其 id
# 引入 &amp;lt;script async src=&amp;#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&amp;#34;&amp;gt;&amp;lt;script&amp;gt; # 站点 PV &amp;lt;span id=&amp;#34;busuanzi_container_site_pv&amp;#34;&amp;gt; 本站总访问量&amp;lt;span id=&amp;#34;busuanzi_value_site_pv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;次 &amp;lt;/span&amp;gt; # 站点 UV &amp;lt;span id=&amp;#34;busuanzi_container_site_uv&amp;#34;&amp;gt; 本站总访客数&amp;lt;span id=&amp;#34;busuanzi_value_site_uv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;人 &amp;lt;/span&amp;gt; # 页面或文章 PV &amp;lt;span id=&amp;#34;busuanzi_container_page_pv&amp;#34;&amp;gt; 本文总阅读量&amp;lt;span id=&amp;#34;busuanzi_value_page_pv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;次 &amp;lt;/span&amp;gt; 加入到 Hugo 主题中合适位置 以 PaperMod 为例子
head themes/PaperMod/partials/extend_head.html
&amp;lt;!-- busuanzi --&amp;gt; {{- if .Site.Params.busuanzi.enable -}} &amp;lt;script async src=&amp;#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;meta name=&amp;#34;referrer&amp;#34; content=&amp;#34;no-referrer-when-downgrade&amp;#34;&amp;gt; {{- end -}} footer themes/PaperMod/partials/footer.html
&amp;lt;!-- busuanzi --&amp;gt; {{ if .Site.Params.busuanzi.enable -}} &amp;lt;span id=&amp;#34;busuanzi_container_site_uv&amp;#34;&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_value_site_uv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;/&amp;lt;/span&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_container_site_pv&amp;#34;&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_value_site_pv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; {{- end -}} 页面或文章 themes/PaperMod/_default/single.</description>
    </item>
    
    <item>
      <title>给 hugo 添加搜索引擎优化</title>
      <link>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/</guid>
      <description>前言 为了让 Hugo 网站更好的被搜索引擎收录，需要进行搜索引擎优化。
资料 搜索引擎 Google Bing Baidu 开整 给站点和文章添加详细说明 站点配置文件添加 description，例如
description: &amp;#34;likon 的个人技术博客网站，主要专注大前端，记录技术、所思所想&amp;#34; 文章模板添加更多
title: 给 hugo 添加搜索引擎优化 date: 2023-07-19 tags: [&amp;#34;hugo&amp;#34;] keywords: - hugo - 搜索引擎优化 - seo description : &amp;#34;介绍如何给 Hugo 添加搜索引擎优化。&amp;#34; Google 搜索优化 打开 Google 网站站长，点击 SEARCH CONSOLE 进入
下载 html 文件，放到根目录 static 子目录下 生成 meta 标签，添加到站点 &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; 标签内（我的选择） # 我是加到 theme 的 extend_head.html 内，可以全局搜索 &amp;lt;head&amp;gt; &amp;lt;meta name=&amp;#34;baidu-site-verification&amp;#34; content=&amp;#34;xxx&amp;#34; /&amp;gt; 百度搜索优化 基本和 Google 一致 打开 百度搜索资源平台 ，点击链接提交，然后点添加站点。</description>
    </item>
    
    <item>
      <title>静态网站托管服务平台</title>
      <link>https://likontech.github.io/posts/static-site-hosting-service/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/static-site-hosting-service/</guid>
      <description>简要罗列静态网站托管平台。
前言 最近使用Hugo和GitHub Pages搭建个人静态主页，发现一些问题，遂做一个横向方案比较，了解一下具体的异同。有很多平台没有亲自实践，所以说明仅供记录参考，细节有待挖掘和更新。同时，如果您有其他推荐的方案，欢迎评论分享，持续更新：)
GitHub Pages 被设计为直接来源于GitHub仓库的个人、组织或项目主页。 提供静态网站托管服务 不支持服务端代码，比如 PHP、Ruby 或 Python GitHub Pages 提供的域名可以支持 HTTPS 访问 可以配置自定义的域名，但是无法给自定义的域名配置 SSL ，HTTPS is not supported for GitHub Pages using custom domains. 查阅 Github Help，所有 GitHub Pages 网站（包括使用自定义域正确配置的网站）已经都支持 HTTPS 和 HTTPS 强制实施。 响应速度还是有点慢 网站仓库小于1GB，带宽限制 100GB/每月，构建限制10次/每小时 Netlify 不支持后台逻辑运算能力的网页 如果要部署 Hexo 大体思路是，通过 CLI (命令行界面)将 md 渲染为静态网站，然后通过 git 部署到 Git 平台，然后使用 Netlify 的 webhook 自动抓取部署 具有全球CDN、持续部署、一键HTTPS等优势 能通过客户端 JS 与可重用 API 可以带来动态功能，炫酷。 可以使用 Hugo 静态网站生成器和 Hetlify 网站自动化系统配合，以解决 Github Pages 的不支持 HTTPS 和 响应慢的问题 Coding Pages 由国内 Coding 提供 访问速度友好 可以做 GitHub Pages 和 Coding Pages 同时部署 Hexo，然后通过域名 DNS 解析，国外访问 GitHub Pages ，国内 访问 Coding Pages， 以优化访问速度 可以免费绑定多个自定义域名 自定义域名可以享有免费 SSL 证书，全站支持 HTTPS 协议 更新代码库就可以自动部署。服务器稳定，香港服务器国外支持也友好 新增动态页面部署 有一个小问题是，网站首页如果不放置官方『Hosted by Coding Pages』的链接，会系统添加中间『Hosted by Coding Pages』页面。 GitLab Pages 是由 GitLab 提供，旨在为 GitLab 工程、个人、groups 创建网站。 可以使用任何静态网站生成器，如 Jekyll、Middleman、Hexo、Hugo、Pelican等 可以配置自定义域名 HTTPS，需要的是上传证书 Now 不仅支持静态网站托管，也支持 JavaScript(Node.</description>
    </item>
    
    <item>
      <title>给 hugo 添加评论功能</title>
      <link>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</guid>
      <description>前言 添加个评论功能耍耍~
资料 我的主题是 PaperMod，自然去主题文档里搜一搜，找到这个
再次传送到 hugo 官网
默认 Disqus，但我想要的是 GitHub comments，传送到 utterances
贴个描述，小而美
A lightweight comments widget built on GitHub issues. Use GitHub issues for blog comments, wiki pages and more! Open source. 🙌 No tracking, no ads, always free. 📡🚫 No lock-in. All data stored in GitHub issues. 🔓 Styled with Primer, the css toolkit that powers GitHub. 💅 Dark theme. 🌘 Lightweight. Vanilla TypeScript. No font downloads, JavaScript frameworks or polyfills for evergreen browsers.</description>
    </item>
    
    <item>
      <title>重谈单例模式</title>
      <link>https://likontech.github.io/posts/%E9%87%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 May 2022 23:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E9%87%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>前言 一提到 iOS 单例模式，一般都会想到如下常用方式。
+ (instancetype)sharedInstance { static TestClass *_sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ _sharedInstance = [[self alloc] init]; }); return _sharedInstance; } 大家按约定使用 sharedInstance 获取单例，似乎没有什么问题，大家也都是这么做的。
其实，单例模式其实不只是仅仅一个 sharedInstance 方法就够了
完整写法 避免使用方使用 alloc、new 和 copy、mutableCopy，有两种处理办法
写法一 + (instancetype)sharedInstance { static TestClass *_sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ _sharedInstance = [[self alloc] init]; }); return _sharedInstance; } + (instancetype)allocWithZone:(struct _NSZone *)zone { return [self sharedInstance]; } - (id)copyWithZone:(struct _NSZone *)zone { return [TestClass sharedInstance]; } - (id)mutableCopyWithZone:(NSZone *)zone { return [TestClass sharedInstance]; } 写法二 + (instancetype)sharedInstance { static TestClass *_sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ _sharedInstance = [[self alloc] init]; }); return _sharedInstance; } # .</description>
    </item>
    
    <item>
      <title>压力之下，择要事为之</title>
      <link>https://likontech.github.io/posts/%E5%8E%8B%E5%8A%9B%E4%B9%8B%E4%B8%8B%E6%8B%A9%E8%A6%81%E4%BA%8B%E4%B8%BA%E4%B9%8B/</link>
      <pubDate>Tue, 26 Apr 2022 21:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E5%8E%8B%E5%8A%9B%E4%B9%8B%E4%B8%8B%E6%8B%A9%E8%A6%81%E4%BA%8B%E4%B8%BA%E4%B9%8B/</guid>
      <description>写在前面 偶然间，看到一本世界卫生组织关于应对逆境时的压力管理指南。颇为有感想，遂起记录下来的心思。一来希望能读薄这本指南，往后备用翻阅，二来希望能够分享给更多的人，望助很好地应对压力。
“压力”是指感觉到生活受到困扰或威胁。
「你正在承受压力，但你不是孤独的，每个人都会经受压力。此时此刻，在你身边，在世界各地，很多人像你一样，也在与压力斗争。」
指南分为五部分，着陆、解套、践行个人价值观、保持友善和留有空间。、
总结先行 总结甚好，保留原图，翻阅备用。
着陆 解套 践行个人价值观 友善 留有空间 一点琐碎 想法和感受 想法和感受是压力的自然组成部分，压力的情景下，一些想法和感受会困扰我们，使得我们背离自己的价值观。
30 秒着陆 注意你的想法和感受。 使自己慢下来并与自己的身体连接。 减慢你的呼吸频率，彻底呼出肺部空气，然后尽可能慢的吸入； 慢慢地将你的脚踩向地板； 慢慢地伸展你的手臂，或者慢慢地将你的双手合在一起； 重新关注你周围的世界，充满好奇地注意，你可以看、听、尝、闻和触摸到什么？ 你在哪？能看到 5 样东西是什么？ 你能听到 3-4 种声音是什么？ 呼吸空气，你能闻到什么味道？ 注意你在哪里和正在做什么？ 触摸你的膝盖、身体下物体的表面，或你可以触及的任何物体，注意你手指的感觉 解套 注意到让你困扰想法和感受 将这些想法和感受说出来（默默地）、 重新专注于你正在做的事情 践行个人价值观 价值观是你对自己想成为那种人的最深切的渴望。描述了你自己想成为什么样的人的真实想法，以及如何对待自己、他人以及你周围的世界。
践行时，时常问问自己，你的行动是在接近还是背离自己的价值观呢？
常见价值观有哪些呢？
友善、关爱、慷慨、支持、有帮助 勇敢、坚持不懈、宽容、感激 耐心、负责、保护、有原则、努力、言而有信 忠诚、品行端正正直、恭敬、公平公正等等 友善 注意和命名不友善的想法，让自己着陆，使自己投入周围的世界。 友善待人，友善待己。
留有空间 为困扰你的想法和感受留有空间。
写在最后 附 WHO 网站 Doing What Matters in Times of Stress 指南，其中有多国语言版本以供选择。</description>
    </item>
    
    <item>
      <title>记一次 Ruby on Rails 部署记录</title>
      <link>https://likontech.github.io/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-ruby-on-rails-%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 19 Apr 2022 13:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-ruby-on-rails-%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</guid>
      <description>写在前面 学习 Rails 时，一直都是部署到 Heroku上，方便的确很方便，但总缺点意思。一直想部署到云服务上，所以实操一下，记录一下简单 Rails 项目部署过程，重在部署。
云服务器 采用的是腾讯云，系统Ubuntu Server 16.04.1 LTS 64位
项目示例 采用 blog demo，来自 Rails 官网文档中 Getting Started with Rails。
安装服器软件 采用 Ubuntu 内建的套件管理工具 apt-get
更新软件列表 sudo apt-get update 安装 Ruby on Rails 需要的软件 sudo apt-get install -y build-essential git-core bison openssl libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 autoconf libc6-dev libpcre3-dev libcurl4-nss-dev libxml2-dev libxslt-dev imagemagick nodejs libffi-dev 安装 Ruby，使用 Brighbox 已经编译好的 Ruby sudo apt-get install software-properties-common sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.</description>
    </item>
    
    <item>
      <title>搭建私有 RubyGem</title>
      <link>https://likontech.github.io/posts/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-rubygem/</link>
      <pubDate>Mon, 18 Apr 2022 13:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-rubygem/</guid>
      <description>写在前面 在 iOS 开发过程中，不可避免会接触到 CocoaPods。CocoaPods 是 Swift 和 Objective-C Cocoa 项目的依赖管理器，帮你优雅的管理扩展项目。想到自己搭建私有 spec repo，来托管私有 pod 的 podspec。
Gem in a box gem 开发管理过程中，自然也少不了自建私有托管平台的需求。
Google 查到有一个开源项目 Gem in a box，而且我们公司也是用的这个开源项目搭建的托管 gem 平台，当然需要研究学习一番。
首先必须去逛逛 GitHub，找到开源源码，然后找文档、教程，实操一下。
实操记录，托管平台自然要分为 server 和 client 两端。
SERVER 文档 安装 geminabox
gem install geminabox Home 目录下创建 config.ru 文件 最后，使用 passenger，thin，unicorn 等等，随你便。
gem install rack gem install thin rackup config.ru 浏览器打开 http://127.0.0.1:9292/ CLIENT 文档 Gem，写一个吧，将自己写的 gem 上传上去。
gem install geminabox gem inabox gleksayhi-0.</description>
    </item>
    
    <item>
      <title>Gem，写一个吧</title>
      <link>https://likontech.github.io/posts/%E5%86%99%E4%B8%80%E4%B8%AAgem/</link>
      <pubDate>Sat, 16 Apr 2022 20:40:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E5%86%99%E4%B8%80%E4%B8%AAgem/</guid>
      <description>前言 最好的教程当然还是官方文档。
手把手 以新建一个名为 gleksayhi 的 gem 🙋🌰
新建 gleksayhi.rb 文件，功能仅为一行打印
新建 gleksayhi.gemspec
由 gemspec 新建一个 gem
gem build gleksayhi.gemspec 安装本地 gem
gem install ./gleksayhi-0.0.1.gem 查看是否安装上，并验证 gem 功能
接下来先注册一个 https://rubygems.org/ 的账号，然后浏览器访问 https://rubygems.org/api/v1/api_key.yaml，输入账号密码，下载 api_key.yaml 文件，将文件改名为 credentials，放置 ~/.gem 目录下。修改文件权限
chmod 0600 ~/.gem/credentials 现在你可以发布你的 gem 到 RubyGems.org，来分享你的 gem 了
gem push gleksayhi-0.0.1.gem 最后，可以查询下远程你的 gem
gem list -r gleksay 大功告成。
One more thing 解决依赖 另外，随着功能的复杂性提高，多文件肯定是必不可少的，需要处理文件的依赖关系，也就是依赖方 require 被依赖方。此时，gemspec 里的 file 配置就需要做些改动，包含所有文件。
当然，也有一些解决方案，解决众多文件配置 gemspec 问题。
https://github.com/seattlerb/hoe https://github.</description>
    </item>
    
    <item>
      <title>iOS 真机中设置 Slow Animations</title>
      <link>https://likontech.github.io/posts/ios-slow-animation/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/ios-slow-animation/</guid>
      <description>分享个 XCode LLDB 调试小技巧
前言 在 iOS 开发中，动画也是一个很重要的组成部分。你会不会因为动画需要有灵性，苦于一点点调试参数，但又看不清楚细节？会不会遇到 App 中某些色块一闪而过？会不会突然闪屏不知道为什么？
当然，不可避免。
可能会用到的调试技巧 或许有些人，早已知道，模拟器中，苹果提供了 Slow Animations 选项。也或许有些人还不知道，或者未尝试使用过。
模拟器开启 Slow Animations 打开模拟器，菜单栏 &amp;gt; Debug &amp;gt; Show Animations
真机开启 Slow Animations 可以使用 LLDB 实现 Slow Animations 点击 Debug 区域的 Pause program execution 点击 Debug 区域的 LLDB 中输入命令 p [(CALayer *)[[[[UIApplication sharedApplication] windows] objectAtIndex:0] layer] setSpeed:.1f] 另外，Swift 使用 p UIApplication.sharedApplication().windows.first?.layer.speed = 0.1 即可。 点击 Debug 区域的 Continue program execution 可以代码形式实现 Slow Animations didFinishLaunchingWithOptions 中设置 self.</description>
    </item>
    
    <item>
      <title>RubyGems三两事</title>
      <link>https://likontech.github.io/posts/rubygems%E4%B8%89%E4%B8%A4%E4%BA%8B/</link>
      <pubDate>Sun, 10 Apr 2022 02:25:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/rubygems%E4%B8%89%E4%B8%A4%E4%BA%8B/</guid>
      <description>前言 RubyGems 是 Ruby 的一个包管理器。类似于 Ubuntu 的 apt-get，CentOS 的 yum，Python 的 pip，iOS 的 Cocoapods。方便 Rubyists 管理软件包（gem），分享可复用的功能，为应用、库的开发提供坚实的巨人肩膀。
Gem Gem 一般都有 version、name 和 platform。
gem help platform Gems 内部组成一般分为以下三部分：
Code (including tests and supporting utilities) Documentation gemspec 示例 Gem cocoapods-search-1.0.0 代码组织结构
lib 包含 gem 的源码。
test 或者 spec 包含开发者测试的代码或者测试框架。
Rakefile 通常为 rake 程序自动化测试、生成代码、执行任务。
bin 包含可执行文件，在 gem 安装时加载到 PATH 中。
文档通常包含 README 和代码内联说明，在 gem 安装时自动生成，一般 为 RDoc 文档和 YARD 文档。
gemspec 包含 gem 的信息。</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://likontech.github.io/about/</link>
      <pubDate>Sat, 23 May 1992 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/about/</guid>
      <description> Hi there 👋
🛠️ Working on sankuai 🌱 Focusing on front-end 🤔 Recording thoughts 💌 Pursuit of inner peace 💪 Practice lifelong learning 🎮 Playing ゼルダの伝説王国の涙 Thanks 😊
🥇Hugo and Zozo </description>
    </item>
    
  </channel>
</rss>
