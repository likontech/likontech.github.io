<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on likon</title>
    <link>https://likontech.github.io/tags/vue/</link>
    <description>Recent content in vue on likon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://likontech.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue Doc 随手记 ——组合式函数</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0/</guid>
      <description>组合式函数 在 Vue 应用的概念中，“组合式函数”(Composables) 是一个利用 Vue 的组合式 API 来封装和复用 有状态逻辑的函数。
复用公共逻辑
无状态的逻辑，如 lodash 或是 date-fns 等库。 有状态的逻辑，有状态逻辑负责管理会随时间而变化的状态，如数据库连接状态、触摸手势等 示例：鼠标跟踪器
&amp;lt;script setup&amp;gt; import { ref, onMounted, onUnmounted } from &amp;#39;vue&amp;#39; const x = ref(0) const y = ref(0) function update(event) { x.value = event.pageX y.value = event.pageY } onMounted(() =&amp;gt; window.addEventListener(&amp;#39;mousemove&amp;#39;, update)) onUnmounted(() =&amp;gt; window.removeEventListener(&amp;#39;mousemove&amp;#39;, update)) &amp;lt;/script&amp;gt; &amp;lt;template&amp;gt;Mouse position is at: {{ x }}, {{ y }}&amp;lt;/template&amp;gt; 如果要多组件复用逻辑，就需要组合式函数。
// 实现 // mouse.js import { ref, onMounted, onUnmounted } from &amp;#39;vue&amp;#39; // 按照惯例，组合式函数名以“use”开头 export function useMouse() { // 被组合式函数封装和管理的状态 const x = ref(0) const y = ref(0) // 组合式函数可以随时更改其状态。 function update(event) { x.</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 ——十-十三节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%8D%81-%E5%8D%81%E4%B8%89%E8%8A%82/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%8D%81-%E5%8D%81%E4%B8%89%E8%8A%82/</guid>
      <description>如果好的老师，好的医生， 评价标准是金钱， 那么也就没必要区分任何职业了 你干嘛的，我赚钱的。 你学啥的，我学赚钱的。 —— 罗翔
十-十三节 生命周期 侦听器 模板引用 组件基础 生命周期 钩子函数 描述 beforeCreate 实例刚在内存中创建，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。 created 实例已经完全创建，数据观测 (data observer) 和 event/watcher 事件配置之后被调用。 beforeMount 实例在挂载之前被调用。相关的 render 函数首次被调用。 mounted 实例挂载到 DOM 后调用，对应 el 被新创建的 vm.$el 替换。 beforeUpdate 数据更新时调用，但是在虚拟 DOM 重新渲染和打补丁之前。可以在这里访问更新前的状态。 updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁后调用。 beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用。 destroyed Vue 实例销毁后调用，清理工作应在这里进行。 errorCaptured 捕获子孙组件抛出的错误，不会向上冒泡。 侦听器 watch watch 是一个用于监听 Vue 实例数据变化的选项。
通过使用 watch，你可以在数据发生变化时执行特定的逻辑操作，比如发送网络请求、更新其他数据、触发事件等。
watch 提供了一种响应式地监视数据变化的方式，使得你可以在数据状态改变时做出相应的反应。
watch 选项有两种用法：
直接在组件的选项中定义 是使用实例方法 $watch 1.</description>
    </item>
    
    <item>
      <title>Vue 插槽</title>
      <link>https://likontech.github.io/posts/vue-%E6%8F%92%E6%A7%BD/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-%E6%8F%92%E6%A7%BD/</guid>
      <description>插槽（Slots）是 Vue.js 中一种强大的组件通信机制，它允许你在组件的模板中预留一些位置，将父组件中的内容传递到子组件中。插槽允许你在父组件中定义子组件的一部分内容，使得子组件可以接收并渲染这些内容。
当涉及到插槽（Slots）时，Vue.js 提供了三种主要类型的插槽：默认插槽、具名插槽和作用域插槽。这些插槽类型允许你在父组件中向子组件传递内容，并在子组件内部灵活地渲染和处理这些内容。下面我将为你详细解释每种插槽类型。
1. 默认插槽（Default Slots）：
默认插槽是最简单的插槽类型，它允许你将父组件中的内容传递给子组件，并在子组件内部渲染。
父组件模板：
&amp;lt;template&amp;gt; &amp;lt;child-component&amp;gt; &amp;lt;p&amp;gt;This content will be placed in the default slot.&amp;lt;/p&amp;gt; &amp;lt;/child-component&amp;gt; &amp;lt;/template&amp;gt; 子组件模板：
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;Child Component&amp;lt;/h2&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 在子组件的模板中，使用 &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; 标签来表示默认插槽的位置。父组件传递给子组件的内容会被插入到这个位置。
2. 具名插槽（Named Slots）：
具名插槽允许你在子组件的不同位置插入不同的内容，每个具名插槽都有一个名称。
父组件模板：
&amp;lt;template&amp;gt; &amp;lt;child-component&amp;gt; &amp;lt;template v-slot:header&amp;gt; &amp;lt;h3&amp;gt;This is the header&amp;lt;/h3&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;template v-slot:footer&amp;gt; &amp;lt;p&amp;gt;This is the footer&amp;lt;/p&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/child-component&amp;gt; &amp;lt;/template&amp;gt; 子组件模板：
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;h2&amp;gt;Child Component&amp;lt;/h2&amp;gt; &amp;lt;slot name=&amp;#34;header&amp;#34;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;slot name=&amp;#34;footer&amp;#34;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 在父组件中，使用 v-slot 指令来为具名插槽命名，并在子组件中使用 &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; 标签来表示插槽的位置。</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 ——六-九节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%85%AD-%E4%B9%9D%E8%8A%82/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%85%AD-%E4%B9%9D%E8%8A%82/</guid>
      <description>六-九节 条件渲染 列表渲染 事件处理 表单输入绑定 条件渲染 v-if 表达式返回真值时被渲染
&amp;lt;div v-if=&amp;#34;type === &amp;#39;A&amp;#39;&amp;#34;&amp;gt; A &amp;lt;/div&amp;gt; &amp;lt;div v-else-if=&amp;#34;type === &amp;#39;B&amp;#39;&amp;#34;&amp;gt; B &amp;lt;/div&amp;gt; &amp;lt;div v-else-if=&amp;#34;type === &amp;#39;C&amp;#39;&amp;#34;&amp;gt; C &amp;lt;/div&amp;gt; &amp;lt;div v-else&amp;gt; Not A/B/C &amp;lt;/div&amp;gt; # 不止一个元素可以依附于 &amp;lt;template&amp;gt; &amp;lt;template v-if=&amp;#34;ok&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Paragraph 1&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Paragraph 2&amp;lt;/p&amp;gt; &amp;lt;/template&amp;gt; v-show 按条件显示一个元素
&amp;lt;h1 v-show=&amp;#34;ok&amp;#34;&amp;gt;Hello!&amp;lt;/h1&amp;gt; v-if 和 v-show 区别
特性 v-if v-show 渲染方式 根据条件动态添加或移除元素 通过 CSS 控制元素的显示与隐藏 初始化开销 需要初始化开销，条件为 true 时创建元素并插入 DOM 无初始化开销，元素一直在 DOM 中，通过 CSS 控制显示隐藏 性能考虑 适合条件变化较少或有大块内容需要动态渲染 适合条件频繁变化或内容变化较少，仅需切换显示隐藏 适用场景 动态内容频繁变化时较为高效 静态内容或频繁切换显示隐藏的情况下较为高效 列表渲染 v-for 基于一个数组来渲染一个列表</description>
    </item>
    
    <item>
      <title>Vue render 和 mixin 浅学</title>
      <link>https://likontech.github.io/posts/vue-render-%E5%92%8C-mixin-%E6%B5%85%E5%AD%A6/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-render-%E5%92%8C-mixin-%E6%B5%85%E5%AD%A6/</guid>
      <description>render 在 Vue.js 中，render 函数是一个核心的概念，用于手动创建虚拟 DOM，并将其渲染为真实的 DOM。通常，我们使用 Vue.js 的模板语法（即在 &amp;lt;template&amp;gt; 标签中编写模板）来声明页面的结构和数据绑定，然后由 Vue.js 自动将模板渲染为虚拟 DOM 和真实的 DOM。
然而，有时我们需要在更底层的层面上直接控制页面的渲染过程，这时就可以使用 render 函数。render 函数接收一个名为 h 的参数，它是一个创建虚拟 DOM 元素的辅助函数（也称为 hyperscript），你可以用它来手动创建虚拟 DOM。
h 函数是 Vue.js 中的一个重要概念，它是用于创建虚拟 DOM 元素的辅助函数（也称为 hyperscript）。在 render 函数中，我们可以使用 h 函数手动构建虚拟 DOM，然后 Vue.js 会将这些虚拟 DOM 转换成真实 DOM 并渲染到页面上。
h 函数的名称是 &amp;ldquo;hyperscript&amp;rdquo; 的缩写，它的名字来自于 JavaScript 中的 &amp;ldquo;hypertext&amp;rdquo;（超文本）和 &amp;ldquo;script&amp;rdquo;（脚本）。这个函数具有以下语法：
h(tag, data?, children?) tag：表示创建的元素的标签名，可以是字符串形式的标签名，也可以是组件选项对象。例如，&#39;div&#39; 或 MyComponent。
data（可选）：是一个包含了元素的属性、样式、事件等信息的对象。
children（可选）：表示元素的子元素，可以是文本内容或其他虚拟 DOM 元素。
基本的 render 函数使用方法如下：
import Vue from &amp;#39;vue&amp;#39;; new Vue({ render(h) { // 创建虚拟 DOM 元素并返回 return h(&amp;#39;div&amp;#39;, { class: &amp;#39;container&amp;#39; }, [ h(&amp;#39;h1&amp;#39;, &amp;#39;Hello, Vue!</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 ——三-五节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E4%B8%89-%E4%BA%94%E8%8A%82/</link>
      <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E4%B8%89-%E4%BA%94%E8%8A%82/</guid>
      <description>室温超导体新闻这两天热火朝天。
室温超导体是指在常规的室温条件下（通常是接近或等于常温，即约 20 摄氏度）能够表现出超导现象的材料。超导现象是指在某些材料中，在特定的低温条件下，电阻突然变为零，并且磁场被完全排斥的现象。传统的超导材料需要极低的温度（接近绝对零度，约 -273.15 摄氏度）才能表现出超导行为，这对于应用和实际应用来说非常不便。
三-五节 响应式基础 计算属性 Class 与 Style 绑定 响应式基础 ref import { ref } from &amp;#39;vue&amp;#39; export default { setup() { const count = ref(0) function increment() { // 在 JavaScript 中需要 .value count.value++ } // 不要忘记同时暴露 increment 函数 return { count, increment } } } &amp;lt;button @click=&amp;#34;increment&amp;#34;&amp;gt; {{ count }} &amp;lt;/button&amp;gt; 在 setup() 函数中手动暴露大量的状态和方法非常繁琐。可以通过使用单文件组件 (SFC) 来避免这种情况。可以使用 &amp;lt;script setup&amp;gt; 简化代码。
&amp;lt;script setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39; const count = ref(0) function increment() { count.</description>
    </item>
    
    <item>
      <title>《Vue Guide》随手记 —— 前两节</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%89%8D%E4%B8%A4%E8%8A%82/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%89%8D%E4%B8%A4%E8%8A%82/</guid>
      <description>台风“杜苏芮”，北京连续多雨。
前两节 演练场 创建本地工程 npm init vue@latest 创建一个 Vue 应用​ 模板语法 创建一个 Vue 应用 import { createApp } from &amp;#39;vue&amp;#39; const app = createApp({ /* 根组件选项 */ }) 这段代码是一个使用 Vue 3 Composition API 创建新的 Vue.js 应用程序的示例。
模板语法 文本插值 原始 HTML Attribute 绑定 &amp;lt;script setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39; const msg = ref(&amp;#39;Hello World!&amp;#39;) const rawHtml = ref(&amp;#39;&amp;lt;span style=&amp;#34;color: red&amp;#34;&amp;gt;This should be red.&amp;lt;/span&amp;gt;&amp;#39;); &amp;lt;/script&amp;gt; &amp;lt;template&amp;gt; &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt; &amp;lt;input v-model=&amp;#34;msg&amp;#34;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue Doc 随手记 —— 核心功能和特点</title>
      <link>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%92%8C%E7%89%B9%E7%82%B9/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-doc-%E9%9A%8F%E6%89%8B%E8%AE%B0-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%92%8C%E7%89%B9%E7%82%B9/</guid>
      <description>背景 最近需要使用 Vue + Composition API 开发项目需求，所以再过下相关文档，做一下记录。
开始 Vue：Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。
Vue 的两个核心功能
声明式渲染：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。 早年间流行的 jQuery 就是典型的命令式框架。命令式框架的一大特点就是关注过程。例如，我们把下面这段话翻译成对应的代码：
01 - 获取 id 为 app 的 div 标签 02 - 它的文本内容为 hello world 03 - 为其绑定点击事件 04 - 当点击时弹出提示：ok 对应的代码为：
01 $(&amp;#39;#app&amp;#39;) // 获取 div 02 .text(&amp;#39;hello world&amp;#39;) // 设置文本内容 03 .on(&amp;#39;click&amp;#39;, () =&amp;gt; { alert(&amp;#39;ok&amp;#39;) }) // 绑定点击事件 可以看到，自然语言描述能够与代码产生一一对应的关系，代码本身描述的是“做事的过程”，这符合我们的逻辑直觉。
与命令式框架更加关注过程不同，声明式框架更加关注结果。结合 Vue.</description>
    </item>
    
  </channel>
</rss>
