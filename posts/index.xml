<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on likon</title>
    <link>https://likontech.github.io/posts/</link>
    <description>Recent content in Posts on likon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://likontech.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《Vue Guide》随手记 ——三-五节</title>
      <link>https://likontech.github.io/posts/vue-guide%E9%9A%8F%E6%89%8B%E8%AE%B0-%E4%B8%89-%E4%BA%94%E8%8A%82/</link>
      <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-guide%E9%9A%8F%E6%89%8B%E8%AE%B0-%E4%B8%89-%E4%BA%94%E8%8A%82/</guid>
      <description>室温超导体新闻这两天热火朝天。
室温超导体是指在常规的室温条件下（通常是接近或等于常温，即约 20 摄氏度）能够表现出超导现象的材料。超导现象是指在某些材料中，在特定的低温条件下，电阻突然变为零，并且磁场被完全排斥的现象。传统的超导材料需要极低的温度（接近绝对零度，约 -273.15 摄氏度）才能表现出超导行为，这对于应用和实际应用来说非常不便。
三-五节 演练场 创建本地工程 npm init vue@latest 响应式基础 计算属性 Class 与 Style 绑定 响应式基础 ref import { ref } from &amp;#39;vue&amp;#39; export default { setup() { const count = ref(0) function increment() { // 在 JavaScript 中需要 .value count.value++ } // 不要忘记同时暴露 increment 函数 return { count, increment } } } &amp;lt;button @click=&amp;#34;increment&amp;#34;&amp;gt; {{ count }} &amp;lt;/button&amp;gt; 在 setup() 函数中手动暴露大量的状态和方法非常繁琐。可以通过使用单文件组件 (SFC) 来避免这种情况。可以使用 &amp;lt;script setup&amp;gt; 简化代码。</description>
    </item>
    
    <item>
      <title>《Vue Guide》随手记 —— 前两节</title>
      <link>https://likontech.github.io/posts/vue-guide%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%89%8D%E4%B8%A4%E8%8A%82-copy/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-guide%E9%9A%8F%E6%89%8B%E8%AE%B0-%E5%89%8D%E4%B8%A4%E8%8A%82-copy/</guid>
      <description>台风“杜苏芮”，北京连续多雨。
前两节 演练场 创建本地工程 npm init vue@latest 创建一个 Vue 应用​ 模板语法 创建一个 Vue 应用 import { createApp } from &amp;#39;vue&amp;#39; const app = createApp({ /* 根组件选项 */ }) 这段代码是一个使用 Vue 3 Composition API 创建新的 Vue.js 应用程序的示例。
模板语法 文本插值 原始 HTML Attribute 绑定 &amp;lt;script setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39; const msg = ref(&amp;#39;Hello World!&amp;#39;) const rawHtml = ref(&amp;#39;&amp;lt;span style=&amp;#34;color: red&amp;#34;&amp;gt;This should be red.&amp;lt;/span&amp;gt;&amp;#39;); &amp;lt;/script&amp;gt; &amp;lt;template&amp;gt; &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt; &amp;lt;input v-model=&amp;#34;msg&amp;#34;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>《Vue Guide》随手记 —— 核心功能和特点</title>
      <link>https://likontech.github.io/posts/vue-guide%E9%9A%8F%E6%89%8B%E8%AE%B0-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%92%8C%E7%89%B9%E7%82%B9/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/vue-guide%E9%9A%8F%E6%89%8B%E8%AE%B0-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%92%8C%E7%89%B9%E7%82%B9/</guid>
      <description>背景 最近需要使用 Vue + Composition API 开发项目需求，所以再过下相关文档，做一下记录。
开始 Vue：Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。
Vue 的两个核心功能
声明式渲染：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。 早年间流行的 jQuery 就是典型的命令式框架。命令式框架的一大特点就是关注过程。例如，我们把下面这段话翻译成对应的代码：
01 - 获取 id 为 app 的 div 标签 02 - 它的文本内容为 hello world 03 - 为其绑定点击事件 04 - 当点击时弹出提示：ok 对应的代码为：
01 $(&amp;#39;#app&amp;#39;) // 获取 div 02 .text(&amp;#39;hello world&amp;#39;) // 设置文本内容 03 .on(&amp;#39;click&amp;#39;, () =&amp;gt; { alert(&amp;#39;ok&amp;#39;) }) // 绑定点击事件 可以看到，自然语言描述能够与代码产生一一对应的关系，代码本身描述的是“做事的过程”，这符合我们的逻辑直觉。
与命令式框架更加关注过程不同，声明式框架更加关注结果。结合 Vue.</description>
    </item>
    
    <item>
      <title>方法论大全——三问 GPT</title>
      <link>https://likontech.github.io/posts/%E6%96%B9%E6%B3%95%E8%AE%BA%E5%A4%A7%E5%85%A8%E4%B8%89%E9%97%AE-gpt/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E6%96%B9%E6%B3%95%E8%AE%BA%E5%A4%A7%E5%85%A8%E4%B8%89%E9%97%AE-gpt/</guid>
      <description>什么是方法论？ 方法论是一种关于方法的学科，也可以理解为对方法的研究和探讨。它关注的是如何寻找、发展和应用有效的方法来解决问题、实现目标或进行研究。方法论不仅限于某一个特定领域，它在各个学科和实践领域都有应用。
在不同领域中，方法论可以包含以下内容：
研究方法论：研究方法论是关于如何进行科学研究的一门学科。它包括研究设计、数据收集、数据分析等方面的方法，旨在帮助研究者系统地进行科学研究，确保研究的可靠性和准确性。
教学方法论：教学方法论是关于如何有效地进行教学和学习的研究。它探讨教学策略、教学资源的选择、学习评估等问题，帮助教师和学生更好地达成学习目标。
管理方法论：管理方法论关注如何高效地组织和管理组织、团队或项目。它涉及到决策、计划、执行、监控等方面的方法，以实现组织目标。
哲学方法论：哲学方法论是哲学研究中的一个重要分支，它探讨哲学思考和研究的方法，如何进行哲学推理和分析，以及如何建立哲学理论体系。
技术方法论：技术方法论指导了在工程、科技等领域中的实践方法，例如软件开发方法论、工程设计方法论等。
总之，方法论是对方法和过程进行系统、理性探讨的学科，它的目标是寻找最优、高效、可靠的方法来解决问题，推动知识和实践的进步。无论在学术研究、教学、管理还是其他领域，方法论都发挥着重要的指导作用。
为什么方法论很重要？ 方法论在各个领域都非常重要，因为它是指导和规范我们思考和解决问题的方法和原则。以下是方法论的重要性：
提高效率：合理的方法能够提高工作和学习的效率。通过有条理的步骤和有效的策略，我们可以更快地达到目标，并节省时间和精力。
确保准确性和可靠性：方法论有助于确保我们的思考和行动是准确、可靠的。使用科学、经过验证的方法，可以减少错误和误判的可能性，从而得出更准确的结论。
促进创新：恰当的方法能够激发创新思维。通过运用不同的方法探索问题，我们可以发现新的解决方案，创造性地解决挑战。
增强系统性：方法论能够帮助我们建立系统化的思维框架，将复杂问题分解为更容易理解和处理的部分。这样做有助于避免遗漏重要细节，确保全面性。
增加可复制性：好的方法论能够确保研究、实验或项目的可复制性。如果我们按照一定的规则和步骤进行工作，其他人可以复制我们的过程，并验证或进一步发展我们的发现。
优化资源利用：合理的方法可以最大程度地优化资源的利用。无论是时间、金钱还是人力，方法论都能指导我们在实现目标时做出明智的选择。
提高决策质量：方法论有助于决策的理性化。在决策过程中，我们可以借鉴已有的方法和框架，使决策更加客观、明晰，减少主观偏见的影响。
促进合作与交流：拥有共同的方法论可以促进团队合作与交流。成员们使用相同的方法和语言，能更好地协作、理解彼此，并避免产生沟通误解。
总的来说，方法论不仅是实现目标的有效工具，还是知识传承和学科发展的基础。它帮助我们在不同领域做出更明智、高效、准确的决策和行动，从而推动个人和社会的进步。
管理和技术领域，主要有哪些经典方法论？ 在管理和技术领域，有许多经典方法论被广泛应用于组织管理、项目管理、问题解决、团队合作以及技术开发等方面。以下是主要的一些经典方法论：
管理领域的经典方法论：
SWOT分析：评估组织或项目的优势（Strengths）、劣势（Weaknesses）、机会（Opportunities）和威胁（Threats），帮助制定战略决策。
PDCA循环（Deming循环）：通过不断的计划（Plan）、执行（Do）、检查（Check）和行动（Act）来实现持续改进。
Kaizen（改善活动）：来自日本的管理哲学，强调持续改进，通过小步骤不断提高效率和质量。
TQM（全面质量管理）：一种注重全员参与、不断改进的质量管理方法，追求满足客户需求和提高组织绩效。
卡内基基金：用于度量学分和学业完成的经典方法，广泛应用于教育领域。
MBWA（管理者走动在岗位）：由彼得·德鲁克（Peter Drucker）提倡，强调管理者应该亲自走动在员工的岗位上，了解实际情况。
技术领域的经典方法论：
敏捷开发：一种强调快速响应变化、团队合作和持续交付的软件开发方法。
测试驱动开发（TDD）：要求在编写功能代码之前先编写测试代码，保证代码质量和功能正确性。
持续集成与持续交付（CI/CD）：自动化的软件交付实践，频繁地集成和交付代码，确保软件稳定性和质量。
设计模式：经验丰富的开发者总结出来的解决常见问题的模板，用于构建可扩展、灵活的代码。
DevOps：结合开发和运维，通过自动化和协作，加快软件交付过程，提高产品质量和稳定性。
安全开发（Secure Coding）：考虑和预防安全漏洞和攻击的实践，保证软件的安全性。
六西格玛（Six Sigma）：一种统计方法，用于提高过程质量和减少缺陷。
人机交互设计（Human-Computer Interaction，HCI）：关注用户体验，设计易于使用的软件和系统。
这些经典方法论在管理和技术领域经过验证，被广泛应用于不同的组织和项目。它们帮助管理者和技术人员在实践中更加系统、高效地达成目标，提高工作质量和效率。根据实际情况和需求，选择合适的方法论并合理应用，有助于取得更好的业绩和成果。</description>
    </item>
    
    <item>
      <title>简单背后的力量：揭秘 37signals 的工作哲学</title>
      <link>https://likontech.github.io/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9B%E9%87%8F%E6%8F%AD%E7%A7%98-37signals-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%93%B2%E5%AD%A6/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%AE%80%E5%8D%95%E8%83%8C%E5%90%8E%E7%9A%84%E5%8A%9B%E9%87%8F%E6%8F%AD%E7%A7%98-37signals-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%93%B2%E5%AD%A6/</guid>
      <description>由于个人偏爱 Ruby 和 Ruby on Rails（简称Rails）， Rails 是一种开源的 Web 应用程序开发框架，最初由 David Heinemeier Hansson 在 37signals 开发 Basecamp （n. 意为登山大本营，基地营（同 base camp））时创建并开源。从 Rails 了解到这家公司 37signals，现在被称为 Basecamp，是一家软件开发公司，成立于 1999 年，由 Jason Fried、Carlos Segura 和 Ernest Kim 创立。
最近在看一本富有启发性和实用性的书 《Rework》，提供了一种非传统的商业思维方式，挑战了传统的工作和管理观念。
所以想更多了解下这个公司和这群人，那么今天就来简单盘一盘这家公司的发展、经营理念和相关产品。
回归正题，先看看公司产品、发展变化。
1999 年：37signals 由 Jason Fried、Carlos Segura 和 Ernest Kim 在美国芝加哥成立，最初是一家网页设计公司。
2004 年：公司发布了 Basecamp，这是一个基于网络的项目管理和协作工具，受到广泛欢迎。Basecamp 的简洁和易用性为公司带来了许多用户和客户。
2006 年：37signals 推出了另一款知名产品，名为 Highrise，这是一款在线联系人和客户关系管理（CRM）工具，用于跟踪客户和商务联系。
2010 年：公司进一步扩展了产品线，推出了 Campfire，这是一个团队协作和实时聊天工具，旨在提高团队之间的沟通效率。
2013 年：37signals 公司宣布将重点转向 Basecamp，并将公司名称改为Basecamp。这标志着他们更专注于进一步发展和改进 Basecamp 产品。
2019 年：Basecamp 发布了全新的 Basecamp 3 版本，带来了一系列新功能和改进，以满足用户需求。</description>
    </item>
    
    <item>
      <title>解锁你的 Node.js 开发潜力：30&#43; 热门框架让你构建出色的应用程序！</title>
      <link>https://likontech.github.io/posts/%E8%A7%A3%E9%94%81%E4%BD%A0%E7%9A%84-node.js-%E5%BC%80%E5%8F%91%E6%BD%9C%E5%8A%9B30&#43;-%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6%E8%AE%A9%E4%BD%A0%E6%9E%84%E5%BB%BA%E5%87%BA%E8%89%B2%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E8%A7%A3%E9%94%81%E4%BD%A0%E7%9A%84-node.js-%E5%BC%80%E5%8F%91%E6%BD%9C%E5%8A%9B30&#43;-%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6%E8%AE%A9%E4%BD%A0%E6%9E%84%E5%BB%BA%E5%87%BA%E8%89%B2%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>罗列下 nodejs 框架，只抛转不引玉。
Express.js：快速且灵活的 Web 应用程序框架。
Koa.js：现代化且轻量级的Web框架，由 Express.js 的创造者打造。
Hapi.js：用于构建可扩展的应用程序和服务的框架。
Nest.js：基于 TypeScript 的渐进式 Node.js 框架，适用于构建可扩展的企业级应用程序。
Meteor：全栈 JavaScript 框架，用于构建现代化的Web和移动应用程序。
Sails.js：类似于 Ruby on Rails 的 MVC 框架，用于构建实时应用程序和 API。
LoopBack：强大的 API 和微服务框架，具有自动生成 API 和数据层的能力。
Adonis.js：基于 MVC 模式的框架，提供了一组强大的工具和功能，用于构建可扩展和高性能的应用程序。
Fastify：快速和低开销的 Web 框架，专注于提供高性能的 API 和服务。
Feathers.js：现代化、轻量级的框架，用于构建实时应用程序和 RESTful API。
Strapi：开源的 Headless CMS，提供易用的界面和灵活的 API，用于创建和管理内容。
Total.js：全栈框架，提供从服务器端渲染到数据库集成的一系列功能。
Keystone.js：CMS 和 Web 应用程序框架，结合了 Express.js 和 MongoDB，并提供强大的管理界面。
Socket.io：用于构建实时应用程序的库，提供 WebSocket 和轮询传输等通信方式。
Next.js：用于构建 React 应用程序的框架，提供服务器端渲染、静态生成和动态路由等功能。
Nuxt.js：基于 Vue.js 的应用框架，支持服务器端渲染和静态站点生成。
Restify：专注于构建 RESTful API 的框架，提供易用的路由、请求处理和错误处理等功能。
Kuzzle：后端框架，提供实时通信、数据存储和身份验证等功能，适用于构建实时应用程序和物联网解决方案。
SvelteKit：用于构建高性能 Web 应用程序的框架，结合了 Svelte 的组件化开发和服务器端渲染的功能。</description>
    </item>
    
    <item>
      <title>有意思周刊（2023 W30）</title>
      <link>https://likontech.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E5%91%A8%E5%88%8A2023-w30/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E6%9C%89%E6%84%8F%E6%80%9D%E5%91%A8%E5%88%8A2023-w30/</guid>
      <description>科技 OpenAI 推出安卓版 ChatGPT
今年 5 月 18 日 OpenAI 推出 iOS 版 ChatGPT 应用，这款应用是 ChatGPT 的首款官方移动应用程序，最初仅限于美国市场。 7 月 26 日安卓版 ChatGPT 已正式上线，目前美国、印度、孟加拉国和巴西四国的安卓用户已经可在谷歌 Play 商店进行下载，并计划在下周拓展到更多地区。
工具 动画绘制 手绘个头像？
为所欲为 成语接龙，最终为「为所欲为」
railymood 听，下雨的声音 🌧
cantunsee 设计师闯关，练练你的像素眼
Emoji 合成 一个是 emoji 壁纸，另一个是 emoji 相加，哈哈哈
Git 命令 找一个 Git 命令需要几步？
打字练习 是时候拼一拼手速了</description>
    </item>
    
    <item>
      <title>Ruby 30 min 热身</title>
      <link>https://likontech.github.io/posts/ruby-30-min-%E7%83%AD%E8%BA%AB/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/ruby-30-min-%E7%83%AD%E8%BA%AB/</guid>
      <description>ruby-lang
times 3.times do print &amp;#39;Welcome &amp;#39; end # Welcome Welcome Welcome 2 + 6 2 + 6 4 * 10 5 - 12 30 / 4 &amp;#34;Jimmy&amp;#34; # 7.5 puts puts 4 * 10 puts 5 - 12 puts 30 / 4 string &amp;#34;Jimmy&amp;#34;.reverse # ymmiJ &amp;#34;Jimmy&amp;#34;.length # 5 &amp;#34;Jimmy&amp;#34; * 5 # JimmyJimmyJimmyJimmyJimmy 40.to_s.reverse # 04 poem.gsub(&amp;#34;toast&amp;#34;, &amp;#34;honeydew&amp;#34;) poem.reverse poem.lines.reverse puts poem.lines.reverse.join array [12, 47, 35] [12, 47, 35].</description>
    </item>
    
    <item>
      <title>如何从零开始学会 Ruby on Rails?</title>
      <link>https://likontech.github.io/posts/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%BC%9A-ruby-on-rails/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%BC%9A-ruby-on-rails/</guid>
      <description>摘自 huacnlee 的文章, 文章现在访问不了了，摘抄一份给需要学习的朋友们
这个话题曾经给身边的很多朋友说过同样的话题，这里整理一下。
如果你是一个门外汉，你会 .NET 或是 Java 或是 PHP … 你对 Ruby on Rails 感兴趣，想学习，开怎么开始？
如果你有以上语言两年以上的工作经验，按照我指的路子，最慢 1 个月就能学会 Ruby on Rails，这个方案曾经经过好几个人证实。
以下步骤请一步一步来，切勿心急跳过，最好连我上面的链接都不要提前点击！
安装 Linux 或 Mac， 开发工具使用 Windows &amp;amp; Linux -&amp;gt; Sublime Text 2, Mac -&amp;gt; TextMate 2 当然你也可以用 Vim 或 Sublime text 2;
安装 Ruby 和 Rails 开发环境可以按照这个流程：《如何快速正确的安装 Ruby, Rails》;
看完 http://guides.rubyonrails.org 这里有简体版本；
通过学习 Rails Guides 实现一个博客系统，包涵完整的功能(包括 UI)，预计两周；
从头到尾一字不漏的看完《应用 Rails 进行敏捷 Web 开发》；
回头审视之前的博客设计和《应用 Rails 进行敏捷 Web 开发》的区别，可以再重新搞个博客;</description>
    </item>
    
    <item>
      <title>React Hooks 草稿</title>
      <link>https://likontech.github.io/posts/react-hook-%E8%8D%89%E7%A8%BF/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/react-hook-%E8%8D%89%E7%A8%BF/</guid>
      <description>前言 React v16.8 版本引入了全新的 React Hook API，颠覆了以前的用法。看了很多文章，都认为是 React 的未来，简单介绍介绍。
类组件 看个简单类组件例子
import React, { Component } from &amp;#39;react&amp;#39;; class ClassComponent extends Component { constructor(props) { super(props); this.state = { count: 0, }; } incrementCount = () =&amp;gt; { this.setState((prevState) =&amp;gt; ({ count: prevState.count + 1, })); }; decrementCount = () =&amp;gt; { this.setState((prevState) =&amp;gt; ({ count: prevState.count - 1, })); }; render() { const { count } = this.state; return ( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;Class Component Example&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt; &amp;lt;button onClick={this.</description>
    </item>
    
    <item>
      <title>给 hugo 添加访问量</title>
      <link>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/</guid>
      <description>前言 添加个访问量功能耍耍~
开整 借助不蒜子，两行代码，搞定计数。
打开官网 不蒜子，关键代码如下，打开浏览器检查功能，可以看到 span 标签及其 id
# 引入 &amp;lt;script async src=&amp;#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&amp;#34;&amp;gt;&amp;lt;script&amp;gt; # 站点 PV &amp;lt;span id=&amp;#34;busuanzi_container_site_pv&amp;#34;&amp;gt; 本站总访问量&amp;lt;span id=&amp;#34;busuanzi_value_site_pv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;次 &amp;lt;/span&amp;gt; # 站点 UV &amp;lt;span id=&amp;#34;busuanzi_container_site_uv&amp;#34;&amp;gt; 本站总访客数&amp;lt;span id=&amp;#34;busuanzi_value_site_uv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;人 &amp;lt;/span&amp;gt; # 页面或文章 PV &amp;lt;span id=&amp;#34;busuanzi_container_page_pv&amp;#34;&amp;gt; 本文总阅读量&amp;lt;span id=&amp;#34;busuanzi_value_page_pv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;次 &amp;lt;/span&amp;gt; 加入到 Hugo 主题中合适位置 以 PaperMod 为例子
head themes/PaperMod/partials/extend_head.html
&amp;lt;!-- busuanzi --&amp;gt; {{- if .Site.Params.busuanzi.enable -}} &amp;lt;script async src=&amp;#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;meta name=&amp;#34;referrer&amp;#34; content=&amp;#34;no-referrer-when-downgrade&amp;#34;&amp;gt; {{- end -}} footer themes/PaperMod/partials/footer.html
&amp;lt;!-- busuanzi --&amp;gt; {{ if .Site.Params.busuanzi.enable -}} &amp;lt;span id=&amp;#34;busuanzi_container_site_uv&amp;#34;&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_value_site_uv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;/&amp;lt;/span&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_container_site_pv&amp;#34;&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_value_site_pv&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; {{- end -}} 页面或文章 themes/PaperMod/_default/single.</description>
    </item>
    
    <item>
      <title>给 hugo 添加搜索引擎优化</title>
      <link>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/</guid>
      <description>前言 为了让 Hugo 网站更好的被搜索引擎收录，需要进行搜索引擎优化。
资料 搜索引擎 Google Bing Baidu 开整 给站点和文章添加详细说明 站点配置文件添加 description，例如
description: &amp;#34;likon 的个人技术博客网站，主要专注大前端，记录技术、所思所想&amp;#34; 文章模板添加更多
title: 给 hugo 添加搜索引擎优化 date: 2023-07-19 tags: [&amp;#34;hugo&amp;#34;] keywords: - hugo - 搜索引擎优化 - seo description : &amp;#34;介绍如何给 Hugo 添加搜索引擎优化。&amp;#34; Google 搜索优化 打开 Google 网站站长，点击 SEARCH CONSOLE 进入
下载 html 文件，放到根目录 static 子目录下 生成 meta 标签，添加到站点 &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; 标签内（我的选择） # 我是加到 theme 的 extend_head.html 内，可以全局搜索 &amp;lt;head&amp;gt; &amp;lt;meta name=&amp;#34;baidu-site-verification&amp;#34; content=&amp;#34;xxx&amp;#34; /&amp;gt; 百度搜索优化 基本和 Google 一致 打开 百度搜索资源平台 ，点击链接提交，然后点添加站点。</description>
    </item>
    
    <item>
      <title>静态网站托管服务平台</title>
      <link>https://likontech.github.io/posts/static-site-hosting-service/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/static-site-hosting-service/</guid>
      <description>简要罗列静态网站托管平台。
前言 最近使用Hugo和GitHub Pages搭建个人静态主页，发现一些问题，遂做一个横向方案比较，了解一下具体的异同。有很多平台没有亲自实践，所以说明仅供记录参考，细节有待挖掘和更新。同时，如果您有其他推荐的方案，欢迎评论分享，持续更新：)
GitHub Pages 被设计为直接来源于GitHub仓库的个人、组织或项目主页。 提供静态网站托管服务 不支持服务端代码，比如 PHP、Ruby 或 Python GitHub Pages 提供的域名可以支持 HTTPS 访问 可以配置自定义的域名，但是无法给自定义的域名配置 SSL ，HTTPS is not supported for GitHub Pages using custom domains. 查阅 Github Help，所有 GitHub Pages 网站（包括使用自定义域正确配置的网站）已经都支持 HTTPS 和 HTTPS 强制实施。 响应速度还是有点慢 网站仓库小于1GB，带宽限制 100GB/每月，构建限制10次/每小时 Netlify 不支持后台逻辑运算能力的网页 如果要部署 Hexo 大体思路是，通过 CLI (命令行界面)将 md 渲染为静态网站，然后通过 git 部署到 Git 平台，然后使用 Netlify 的 webhook 自动抓取部署 具有全球CDN、持续部署、一键HTTPS等优势 能通过客户端 JS 与可重用 API 可以带来动态功能，炫酷。 可以使用 Hugo 静态网站生成器和 Hetlify 网站自动化系统配合，以解决 Github Pages 的不支持 HTTPS 和 响应慢的问题 Coding Pages 由国内 Coding 提供 访问速度友好 可以做 GitHub Pages 和 Coding Pages 同时部署 Hexo，然后通过域名 DNS 解析，国外访问 GitHub Pages ，国内 访问 Coding Pages， 以优化访问速度 可以免费绑定多个自定义域名 自定义域名可以享有免费 SSL 证书，全站支持 HTTPS 协议 更新代码库就可以自动部署。服务器稳定，香港服务器国外支持也友好 新增动态页面部署 有一个小问题是，网站首页如果不放置官方『Hosted by Coding Pages』的链接，会系统添加中间『Hosted by Coding Pages』页面。 GitLab Pages 是由 GitLab 提供，旨在为 GitLab 工程、个人、groups 创建网站。 可以使用任何静态网站生成器，如 Jekyll、Middleman、Hexo、Hugo、Pelican等 可以配置自定义域名 HTTPS，需要的是上传证书 Now 不仅支持静态网站托管，也支持 JavaScript(Node.</description>
    </item>
    
    <item>
      <title>给 hugo 添加评论功能</title>
      <link>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E7%BB%99-hugo-%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</guid>
      <description>前言 添加个评论功能耍耍~
资料 我的主题是 PaperMod，自然去主题文档里搜一搜，找到这个
再次传送到 hugo 官网
默认 Disqus，但我想要的是 GitHub comments，传送到 utterances
贴个描述，小而美
A lightweight comments widget built on GitHub issues. Use GitHub issues for blog comments, wiki pages and more! Open source. 🙌 No tracking, no ads, always free. 📡🚫 No lock-in. All data stored in GitHub issues. 🔓 Styled with Primer, the css toolkit that powers GitHub. 💅 Dark theme. 🌘 Lightweight. Vanilla TypeScript. No font downloads, JavaScript frameworks or polyfills for evergreen browsers.</description>
    </item>
    
    <item>
      <title>重谈单例模式</title>
      <link>https://likontech.github.io/posts/%E9%87%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 May 2022 23:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E9%87%8D%E8%B0%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>前言 一提到 iOS 单例模式，一般都会想到如下常用方式。
+ (instancetype)sharedInstance { static TestClass *_sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ _sharedInstance = [[self alloc] init]; }); return _sharedInstance; } 大家按约定使用 sharedInstance 获取单例，似乎没有什么问题，大家也都是这么做的。
其实，单例模式其实不只是仅仅一个 sharedInstance 方法就够了
完整写法 避免使用方使用 alloc、new 和 copy、mutableCopy，有两种处理办法
写法一 + (instancetype)sharedInstance { static TestClass *_sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ _sharedInstance = [[self alloc] init]; }); return _sharedInstance; } + (instancetype)allocWithZone:(struct _NSZone *)zone { return [self sharedInstance]; } - (id)copyWithZone:(struct _NSZone *)zone { return [TestClass sharedInstance]; } - (id)mutableCopyWithZone:(NSZone *)zone { return [TestClass sharedInstance]; } 写法二 + (instancetype)sharedInstance { static TestClass *_sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ _sharedInstance = [[self alloc] init]; }); return _sharedInstance; } # .</description>
    </item>
    
    <item>
      <title>压力之下，择要事为之</title>
      <link>https://likontech.github.io/posts/%E5%8E%8B%E5%8A%9B%E4%B9%8B%E4%B8%8B%E6%8B%A9%E8%A6%81%E4%BA%8B%E4%B8%BA%E4%B9%8B/</link>
      <pubDate>Tue, 26 Apr 2022 21:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E5%8E%8B%E5%8A%9B%E4%B9%8B%E4%B8%8B%E6%8B%A9%E8%A6%81%E4%BA%8B%E4%B8%BA%E4%B9%8B/</guid>
      <description>写在前面 偶然间，看到一本世界卫生组织关于应对逆境时的压力管理指南。颇为有感想，遂起记录下来的心思。一来希望能读薄这本指南，往后备用翻阅，二来希望能够分享给更多的人，望助很好地应对压力。
“压力”是指感觉到生活受到困扰或威胁。
「你正在承受压力，但你不是孤独的，每个人都会经受压力。此时此刻，在你身边，在世界各地，很多人像你一样，也在与压力斗争。」
指南分为五部分，着陆、解套、践行个人价值观、保持友善和留有空间。、
总结先行 总结甚好，保留原图，翻阅备用。
着陆 解套 践行个人价值观 友善 留有空间 一点琐碎 想法和感受 想法和感受是压力的自然组成部分，压力的情景下，一些想法和感受会困扰我们，使得我们背离自己的价值观。
30 秒着陆 注意你的想法和感受。 使自己慢下来并与自己的身体连接。 减慢你的呼吸频率，彻底呼出肺部空气，然后尽可能慢的吸入； 慢慢地将你的脚踩向地板； 慢慢地伸展你的手臂，或者慢慢地将你的双手合在一起； 重新关注你周围的世界，充满好奇地注意，你可以看、听、尝、闻和触摸到什么？ 你在哪？能看到 5 样东西是什么？ 你能听到 3-4 种声音是什么？ 呼吸空气，你能闻到什么味道？ 注意你在哪里和正在做什么？ 触摸你的膝盖、身体下物体的表面，或你可以触及的任何物体，注意你手指的感觉 解套 注意到让你困扰想法和感受 将这些想法和感受说出来（默默地）、 重新专注于你正在做的事情 践行个人价值观 价值观是你对自己想成为那种人的最深切的渴望。描述了你自己想成为什么样的人的真实想法，以及如何对待自己、他人以及你周围的世界。
践行时，时常问问自己，你的行动是在接近还是背离自己的价值观呢？
常见价值观有哪些呢？
友善、关爱、慷慨、支持、有帮助 勇敢、坚持不懈、宽容、感激 耐心、负责、保护、有原则、努力、言而有信 忠诚、品行端正正直、恭敬、公平公正等等 友善 注意和命名不友善的想法，让自己着陆，使自己投入周围的世界。 友善待人，友善待己。
留有空间 为困扰你的想法和感受留有空间。
写在最后 附 WHO 网站 Doing What Matters in Times of Stress 指南，其中有多国语言版本以供选择。</description>
    </item>
    
    <item>
      <title>记一次 Ruby on Rails 部署记录</title>
      <link>https://likontech.github.io/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-ruby-on-rails-%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 19 Apr 2022 13:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1-ruby-on-rails-%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</guid>
      <description>写在前面 学习 Rails 时，一直都是部署到 Heroku上，方便的确很方便，但总缺点意思。一直想部署到云服务上，所以实操一下，记录一下简单 Rails 项目部署过程，重在部署。
云服务器 采用的是腾讯云，系统Ubuntu Server 16.04.1 LTS 64位
项目示例 采用 blog demo，来自 Rails 官网文档中 Getting Started with Rails。
安装服器软件 采用 Ubuntu 内建的套件管理工具 apt-get
更新软件列表 sudo apt-get update 安装 Ruby on Rails 需要的软件 sudo apt-get install -y build-essential git-core bison openssl libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 autoconf libc6-dev libpcre3-dev libcurl4-nss-dev libxml2-dev libxslt-dev imagemagick nodejs libffi-dev 安装 Ruby，使用 Brighbox 已经编译好的 Ruby sudo apt-get install software-properties-common sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.</description>
    </item>
    
    <item>
      <title>搭建私有 RubyGem</title>
      <link>https://likontech.github.io/posts/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-rubygem/</link>
      <pubDate>Mon, 18 Apr 2022 13:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89-rubygem/</guid>
      <description>写在前面 在 iOS 开发过程中，不可避免会接触到 CocoaPods。CocoaPods 是 Swift 和 Objective-C Cocoa 项目的依赖管理器，帮你优雅的管理扩展项目。想到自己搭建私有 spec repo，来托管私有 pod 的 podspec。
Gem in a box gem 开发管理过程中，自然也少不了自建私有托管平台的需求。
Google 查到有一个开源项目 Gem in a box，而且我们公司也是用的这个开源项目搭建的托管 gem 平台，当然需要研究学习一番。
首先必须去逛逛 GitHub，找到开源源码，然后找文档、教程，实操一下。
实操记录，托管平台自然要分为 server 和 client 两端。
SERVER 文档 安装 geminabox
gem install geminabox Home 目录下创建 config.ru 文件 最后，使用 passenger，thin，unicorn 等等，随你便。
gem install rack gem install thin rackup config.ru 浏览器打开 http://127.0.0.1:9292/ CLIENT 文档 Gem，写一个吧，将自己写的 gem 上传上去。
gem install geminabox gem inabox gleksayhi-0.</description>
    </item>
    
    <item>
      <title>Gem，写一个吧</title>
      <link>https://likontech.github.io/posts/%E5%86%99%E4%B8%80%E4%B8%AAgem/</link>
      <pubDate>Sat, 16 Apr 2022 20:40:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/%E5%86%99%E4%B8%80%E4%B8%AAgem/</guid>
      <description>前言 最好的教程当然还是官方文档。
手把手 以新建一个名为 gleksayhi 的 gem 🙋🌰
新建 gleksayhi.rb 文件，功能仅为一行打印
新建 gleksayhi.gemspec
由 gemspec 新建一个 gem
gem build gleksayhi.gemspec 安装本地 gem
gem install ./gleksayhi-0.0.1.gem 查看是否安装上，并验证 gem 功能
接下来先注册一个 https://rubygems.org/ 的账号，然后浏览器访问 https://rubygems.org/api/v1/api_key.yaml，输入账号密码，下载 api_key.yaml 文件，将文件改名为 credentials，放置 ~/.gem 目录下。修改文件权限
chmod 0600 ~/.gem/credentials 现在你可以发布你的 gem 到 RubyGems.org，来分享你的 gem 了
gem push gleksayhi-0.0.1.gem 最后，可以查询下远程你的 gem
gem list -r gleksay 大功告成。
One more thing 解决依赖 另外，随着功能的复杂性提高，多文件肯定是必不可少的，需要处理文件的依赖关系，也就是依赖方 require 被依赖方。此时，gemspec 里的 file 配置就需要做些改动，包含所有文件。
当然，也有一些解决方案，解决众多文件配置 gemspec 问题。
https://github.com/seattlerb/hoe https://github.</description>
    </item>
    
    <item>
      <title>iOS 真机中设置 Slow Animations</title>
      <link>https://likontech.github.io/posts/ios-slow-animation/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/ios-slow-animation/</guid>
      <description>分享个 XCode LLDB 调试小技巧
前言 在 iOS 开发中，动画也是一个很重要的组成部分。你会不会因为动画需要有灵性，苦于一点点调试参数，但又看不清楚细节？会不会遇到 App 中某些色块一闪而过？会不会突然闪屏不知道为什么？
当然，不可避免。
可能会用到的调试技巧 或许有些人，早已知道，模拟器中，苹果提供了 Slow Animations 选项。也或许有些人还不知道，或者未尝试使用过。
模拟器开启 Slow Animations 打开模拟器，菜单栏 &amp;gt; Debug &amp;gt; Show Animations
真机开启 Slow Animations 可以使用 LLDB 实现 Slow Animations 点击 Debug 区域的 Pause program execution 点击 Debug 区域的 LLDB 中输入命令 p [(CALayer *)[[[[UIApplication sharedApplication] windows] objectAtIndex:0] layer] setSpeed:.1f] 另外，Swift 使用 p UIApplication.sharedApplication().windows.first?.layer.speed = 0.1 即可。 点击 Debug 区域的 Continue program execution 可以代码形式实现 Slow Animations didFinishLaunchingWithOptions 中设置 self.</description>
    </item>
    
    <item>
      <title>RubyGems三两事</title>
      <link>https://likontech.github.io/posts/rubygems%E4%B8%89%E4%B8%A4%E4%BA%8B/</link>
      <pubDate>Sun, 10 Apr 2022 02:25:00 +0000</pubDate>
      
      <guid>https://likontech.github.io/posts/rubygems%E4%B8%89%E4%B8%A4%E4%BA%8B/</guid>
      <description>前言 RubyGems 是 Ruby 的一个包管理器。类似于 Ubuntu 的 apt-get，CentOS 的 yum，Python 的 pip，iOS 的 Cocoapods。方便 Rubyists 管理软件包（gem），分享可复用的功能，为应用、库的开发提供坚实的巨人肩膀。
Gem Gem 一般都有 version、name 和 platform。
gem help platform Gems 内部组成一般分为以下三部分：
Code (including tests and supporting utilities) Documentation gemspec 示例 Gem cocoapods-search-1.0.0 代码组织结构
lib 包含 gem 的源码。
test 或者 spec 包含开发者测试的代码或者测试框架。
Rakefile 通常为 rake 程序自动化测试、生成代码、执行任务。
bin 包含可执行文件，在 gem 安装时加载到 PATH 中。
文档通常包含 README 和代码内联说明，在 gem 安装时自动生成，一般 为 RDoc 文档和 YARD 文档。
gemspec 包含 gem 的信息。</description>
    </item>
    
  </channel>
</rss>
